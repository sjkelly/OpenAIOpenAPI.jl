# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ModelsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ModelsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ModelsApi }) = "https://api.openai.com/v1"

const _returntypes_delete_model_ModelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteModelResponse,
)

function _oacinternal_delete_model(_api::ModelsApi, model::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_model_ModelsApi, "/models/{model}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "model", model)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.

Params:
- model::String (required)

Return: DeleteModelResponse, OpenAPI.Clients.ApiResponse
"""
function delete_model(_api::ModelsApi, model::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model(_api, model; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_model(_api::ModelsApi, response_stream::Channel, model::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_model(_api, model; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_models_ModelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListModelsResponse,
)

function _oacinternal_list_models(_api::ModelsApi; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_models_ModelsApi, "/models", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Lists the currently available models, and provides basic information about each one such as the owner and availability.

Params:

Return: ListModelsResponse, OpenAPI.Clients.ApiResponse
"""
function list_models(_api::ModelsApi; _mediaType=nothing)
    _ctx = _oacinternal_list_models(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_models(_api::ModelsApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_list_models(_api; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retrieve_model_ModelsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => Model,
)

function _oacinternal_retrieve_model(_api::ModelsApi, model::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retrieve_model_ModelsApi, "/models/{model}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "model", model)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves a model instance, providing basic information about the model such as the owner and permissioning.

Params:
- model::String (required)

Return: Model, OpenAPI.Clients.ApiResponse
"""
function retrieve_model(_api::ModelsApi, model::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_model(_api, model; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retrieve_model(_api::ModelsApi, response_stream::Channel, model::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_model(_api, model; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export delete_model
export list_models
export retrieve_model
