# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AudioApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AudioApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AudioApi }) = "https://api.openai.com/v1"

const _returntypes_create_speech_AudioApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
)

function _oacinternal_create_speech(_api::AudioApi, create_speech_request::CreateSpeechRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_speech_AudioApi, "/audio/speech", ["ApiKeyAuth", ], create_speech_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/octet-stream", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Generates audio from the input text.

Params:
- create_speech_request::CreateSpeechRequest (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function create_speech(_api::AudioApi, create_speech_request::CreateSpeechRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_speech(_api, create_speech_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_speech(_api::AudioApi, response_stream::Channel, create_speech_request::CreateSpeechRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_speech(_api, create_speech_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_transcription_AudioApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CreateTranscriptionResponse,
)

function _oacinternal_create_transcription(_api::AudioApi, file::Vector{UInt8}, model::CreateTranscriptionRequestModel; language=nothing, prompt=nothing, response_format=nothing, temperature=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_transcription_AudioApi, "/audio/transcriptions", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.form, "model", model)  # type CreateTranscriptionRequestModel
    OpenAPI.Clients.set_param(_ctx.form, "language", language)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "prompt", prompt)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "response_format", response_format)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "temperature", temperature)  # type Float64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Transcribes audio into the input language.

Params:
- file::String (required)
- model::CreateTranscriptionRequestModel (required)
- language::String
- prompt::String
- response_format::String
- temperature::Float64

Return: CreateTranscriptionResponse, OpenAPI.Clients.ApiResponse
"""
function create_transcription(_api::AudioApi, file::String, model::CreateTranscriptionRequestModel; language=nothing, prompt=nothing, response_format=nothing, temperature=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_transcription(_api, file, model; language=language, prompt=prompt, response_format=response_format, temperature=temperature, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_transcription(_api::AudioApi, response_stream::Channel, file::String, model::CreateTranscriptionRequestModel; language=nothing, prompt=nothing, response_format=nothing, temperature=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_transcription(_api, file, model; language=language, prompt=prompt, response_format=response_format, temperature=temperature, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_translation_AudioApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => CreateTranslationResponse,
)

function _oacinternal_create_translation(_api::AudioApi, file::Vector{UInt8}, model::CreateTranscriptionRequestModel; prompt=nothing, response_format=nothing, temperature=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_translation_AudioApi, "/audio/translations", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.form, "model", model)  # type CreateTranscriptionRequestModel
    OpenAPI.Clients.set_param(_ctx.form, "prompt", prompt)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "response_format", response_format)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "temperature", temperature)  # type Float64
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Translates audio into English.

Params:
- file::String (required)
- model::CreateTranscriptionRequestModel (required)
- prompt::String
- response_format::String
- temperature::Float64

Return: CreateTranslationResponse, OpenAPI.Clients.ApiResponse
"""
function create_translation(_api::AudioApi, file::String, model::CreateTranscriptionRequestModel; prompt=nothing, response_format=nothing, temperature=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_translation(_api, file, model; prompt=prompt, response_format=response_format, temperature=temperature, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_translation(_api::AudioApi, response_stream::Channel, file::String, model::CreateTranscriptionRequestModel; prompt=nothing, response_format=nothing, temperature=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_translation(_api, file, model; prompt=prompt, response_format=response_format, temperature=temperature, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_speech
export create_transcription
export create_translation
