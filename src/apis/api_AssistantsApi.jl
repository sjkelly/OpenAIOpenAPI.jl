# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct AssistantsApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `AssistantsApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ AssistantsApi }) = "https://api.openai.com/v1"

const _returntypes_cancel_run_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunObject,
)

function _oacinternal_cancel_run(_api::AssistantsApi, thread_id::String, run_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_cancel_run_AssistantsApi, "/threads/{thread_id}/runs/{run_id}/cancel", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "run_id", run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Cancels a run that is `in_progress`.

Params:
- thread_id::String (required)
- run_id::String (required)

Return: RunObject, OpenAPI.Clients.ApiResponse
"""
function cancel_run(_api::AssistantsApi, thread_id::String, run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_cancel_run(_api, thread_id, run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function cancel_run(_api::AssistantsApi, response_stream::Channel, thread_id::String, run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_cancel_run(_api, thread_id, run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_assistant_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssistantObject,
)

function _oacinternal_create_assistant(_api::AssistantsApi, create_assistant_request::CreateAssistantRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_assistant_AssistantsApi, "/assistants", ["ApiKeyAuth", ], create_assistant_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an assistant with a model and instructions.

Params:
- create_assistant_request::CreateAssistantRequest (required)

Return: AssistantObject, OpenAPI.Clients.ApiResponse
"""
function create_assistant(_api::AssistantsApi, create_assistant_request::CreateAssistantRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_assistant(_api, create_assistant_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_assistant(_api::AssistantsApi, response_stream::Channel, create_assistant_request::CreateAssistantRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_assistant(_api, create_assistant_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_assistant_file_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssistantFileObject,
)

function _oacinternal_create_assistant_file(_api::AssistantsApi, assistant_id::String, create_assistant_file_request::CreateAssistantFileRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_assistant_file_AssistantsApi, "/assistants/{assistant_id}/files", ["ApiKeyAuth", ], create_assistant_file_request)
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create an assistant file by attaching a [File](/docs/api-reference/files) to an [assistant](/docs/api-reference/assistants).

Params:
- assistant_id::String (required)
- create_assistant_file_request::CreateAssistantFileRequest (required)

Return: AssistantFileObject, OpenAPI.Clients.ApiResponse
"""
function create_assistant_file(_api::AssistantsApi, assistant_id::String, create_assistant_file_request::CreateAssistantFileRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_assistant_file(_api, assistant_id, create_assistant_file_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_assistant_file(_api::AssistantsApi, response_stream::Channel, assistant_id::String, create_assistant_file_request::CreateAssistantFileRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_assistant_file(_api, assistant_id, create_assistant_file_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_message_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MessageObject,
)

function _oacinternal_create_message(_api::AssistantsApi, thread_id::String, create_message_request::CreateMessageRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_message_AssistantsApi, "/threads/{thread_id}/messages", ["ApiKeyAuth", ], create_message_request)
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a message.

Params:
- thread_id::String (required)
- create_message_request::CreateMessageRequest (required)

Return: MessageObject, OpenAPI.Clients.ApiResponse
"""
function create_message(_api::AssistantsApi, thread_id::String, create_message_request::CreateMessageRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_message(_api, thread_id, create_message_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_message(_api::AssistantsApi, response_stream::Channel, thread_id::String, create_message_request::CreateMessageRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_message(_api, thread_id, create_message_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_run_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunObject,
)

function _oacinternal_create_run(_api::AssistantsApi, thread_id::String, create_run_request::CreateRunRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_run_AssistantsApi, "/threads/{thread_id}/runs", ["ApiKeyAuth", ], create_run_request)
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a run.

Params:
- thread_id::String (required)
- create_run_request::CreateRunRequest (required)

Return: RunObject, OpenAPI.Clients.ApiResponse
"""
function create_run(_api::AssistantsApi, thread_id::String, create_run_request::CreateRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_run(_api, thread_id, create_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_run(_api::AssistantsApi, response_stream::Channel, thread_id::String, create_run_request::CreateRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_run(_api, thread_id, create_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_thread_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ThreadObject,
)

function _oacinternal_create_thread(_api::AssistantsApi; create_thread_request=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_thread_AssistantsApi, "/threads", ["ApiKeyAuth", ], create_thread_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a thread.

Params:
- create_thread_request::CreateThreadRequest

Return: ThreadObject, OpenAPI.Clients.ApiResponse
"""
function create_thread(_api::AssistantsApi; create_thread_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_thread(_api; create_thread_request=create_thread_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_thread(_api::AssistantsApi, response_stream::Channel; create_thread_request=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_thread(_api; create_thread_request=create_thread_request, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_thread_and_run_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunObject,
)

function _oacinternal_create_thread_and_run(_api::AssistantsApi, create_thread_and_run_request::CreateThreadAndRunRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_thread_and_run_AssistantsApi, "/threads/runs", ["ApiKeyAuth", ], create_thread_and_run_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Create a thread and run it in one request.

Params:
- create_thread_and_run_request::CreateThreadAndRunRequest (required)

Return: RunObject, OpenAPI.Clients.ApiResponse
"""
function create_thread_and_run(_api::AssistantsApi, create_thread_and_run_request::CreateThreadAndRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_thread_and_run(_api, create_thread_and_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_thread_and_run(_api::AssistantsApi, response_stream::Channel, create_thread_and_run_request::CreateThreadAndRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_thread_and_run(_api, create_thread_and_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_assistant_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteAssistantResponse,
)

function _oacinternal_delete_assistant(_api::AssistantsApi, assistant_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_assistant_AssistantsApi, "/assistants/{assistant_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete an assistant.

Params:
- assistant_id::String (required)

Return: DeleteAssistantResponse, OpenAPI.Clients.ApiResponse
"""
function delete_assistant(_api::AssistantsApi, assistant_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_assistant(_api, assistant_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_assistant(_api::AssistantsApi, response_stream::Channel, assistant_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_assistant(_api, assistant_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_assistant_file_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteAssistantFileResponse,
)

function _oacinternal_delete_assistant_file(_api::AssistantsApi, assistant_id::String, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_assistant_file_AssistantsApi, "/assistants/{assistant_id}/files/{file_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete an assistant file.

Params:
- assistant_id::String (required)
- file_id::String (required)

Return: DeleteAssistantFileResponse, OpenAPI.Clients.ApiResponse
"""
function delete_assistant_file(_api::AssistantsApi, assistant_id::String, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_assistant_file(_api, assistant_id, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_assistant_file(_api::AssistantsApi, response_stream::Channel, assistant_id::String, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_assistant_file(_api, assistant_id, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_thread_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteThreadResponse,
)

function _oacinternal_delete_thread(_api::AssistantsApi, thread_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_thread_AssistantsApi, "/threads/{thread_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a thread.

Params:
- thread_id::String (required)

Return: DeleteThreadResponse, OpenAPI.Clients.ApiResponse
"""
function delete_thread(_api::AssistantsApi, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_thread(_api, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_thread(_api::AssistantsApi, response_stream::Channel, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_thread(_api, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_assistant_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssistantObject,
)

function _oacinternal_get_assistant(_api::AssistantsApi, assistant_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_assistant_AssistantsApi, "/assistants/{assistant_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves an assistant.

Params:
- assistant_id::String (required)

Return: AssistantObject, OpenAPI.Clients.ApiResponse
"""
function get_assistant(_api::AssistantsApi, assistant_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_assistant(_api, assistant_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_assistant(_api::AssistantsApi, response_stream::Channel, assistant_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_assistant(_api, assistant_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_assistant_file_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssistantFileObject,
)

function _oacinternal_get_assistant_file(_api::AssistantsApi, assistant_id::String, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_assistant_file_AssistantsApi, "/assistants/{assistant_id}/files/{file_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves an AssistantFile.

Params:
- assistant_id::String (required)
- file_id::String (required)

Return: AssistantFileObject, OpenAPI.Clients.ApiResponse
"""
function get_assistant_file(_api::AssistantsApi, assistant_id::String, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_assistant_file(_api, assistant_id, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_assistant_file(_api::AssistantsApi, response_stream::Channel, assistant_id::String, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_assistant_file(_api, assistant_id, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_message_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MessageObject,
)

function _oacinternal_get_message(_api::AssistantsApi, thread_id::String, message_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_message_AssistantsApi, "/threads/{thread_id}/messages/{message_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "message_id", message_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieve a message.

Params:
- thread_id::String (required)
- message_id::String (required)

Return: MessageObject, OpenAPI.Clients.ApiResponse
"""
function get_message(_api::AssistantsApi, thread_id::String, message_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_message(_api, thread_id, message_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_message(_api::AssistantsApi, response_stream::Channel, thread_id::String, message_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_message(_api, thread_id, message_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_message_file_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MessageFileObject,
)

function _oacinternal_get_message_file(_api::AssistantsApi, thread_id::String, message_id::String, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_message_file_AssistantsApi, "/threads/{thread_id}/messages/{message_id}/files/{file_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "message_id", message_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves a message file.

Params:
- thread_id::String (required)
- message_id::String (required)
- file_id::String (required)

Return: MessageFileObject, OpenAPI.Clients.ApiResponse
"""
function get_message_file(_api::AssistantsApi, thread_id::String, message_id::String, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_message_file(_api, thread_id, message_id, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_message_file(_api::AssistantsApi, response_stream::Channel, thread_id::String, message_id::String, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_message_file(_api, thread_id, message_id, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_run_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunObject,
)

function _oacinternal_get_run(_api::AssistantsApi, thread_id::String, run_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_run_AssistantsApi, "/threads/{thread_id}/runs/{run_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "run_id", run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves a run.

Params:
- thread_id::String (required)
- run_id::String (required)

Return: RunObject, OpenAPI.Clients.ApiResponse
"""
function get_run(_api::AssistantsApi, thread_id::String, run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_run(_api, thread_id, run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_run(_api::AssistantsApi, response_stream::Channel, thread_id::String, run_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_run(_api, thread_id, run_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_run_step_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunStepObject,
)

function _oacinternal_get_run_step(_api::AssistantsApi, thread_id::String, run_id::String, step_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_run_step_AssistantsApi, "/threads/{thread_id}/runs/{run_id}/steps/{step_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "run_id", run_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "step_id", step_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves a run step.

Params:
- thread_id::String (required)
- run_id::String (required)
- step_id::String (required)

Return: RunStepObject, OpenAPI.Clients.ApiResponse
"""
function get_run_step(_api::AssistantsApi, thread_id::String, run_id::String, step_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_run_step(_api, thread_id, run_id, step_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_run_step(_api::AssistantsApi, response_stream::Channel, thread_id::String, run_id::String, step_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_run_step(_api, thread_id, run_id, step_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_get_thread_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ThreadObject,
)

function _oacinternal_get_thread(_api::AssistantsApi, thread_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_get_thread_AssistantsApi, "/threads/{thread_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Retrieves a thread.

Params:
- thread_id::String (required)

Return: ThreadObject, OpenAPI.Clients.ApiResponse
"""
function get_thread(_api::AssistantsApi, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_thread(_api, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function get_thread(_api::AssistantsApi, response_stream::Channel, thread_id::String; _mediaType=nothing)
    _ctx = _oacinternal_get_thread(_api, thread_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_assistant_files_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListAssistantFilesResponse,
)

function _oacinternal_list_assistant_files(_api::AssistantsApi, assistant_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_assistant_files_AssistantsApi, "/assistants/{assistant_id}/files", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "order", order)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "after", after)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "before", before)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of assistant files.

Params:
- assistant_id::String (required)
- limit::Int64
- order::String
- after::String
- before::String

Return: ListAssistantFilesResponse, OpenAPI.Clients.ApiResponse
"""
function list_assistant_files(_api::AssistantsApi, assistant_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_assistant_files(_api, assistant_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_assistant_files(_api::AssistantsApi, response_stream::Channel, assistant_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_assistant_files(_api, assistant_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_assistants_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListAssistantsResponse,
)

function _oacinternal_list_assistants(_api::AssistantsApi; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_assistants_AssistantsApi, "/assistants", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "order", order)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "after", after)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "before", before)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of assistants.

Params:
- limit::Int64
- order::String
- after::String
- before::String

Return: ListAssistantsResponse, OpenAPI.Clients.ApiResponse
"""
function list_assistants(_api::AssistantsApi; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_assistants(_api; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_assistants(_api::AssistantsApi, response_stream::Channel; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_assistants(_api; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_message_files_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListMessageFilesResponse,
)

function _oacinternal_list_message_files(_api::AssistantsApi, thread_id::String, message_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_message_files_AssistantsApi, "/threads/{thread_id}/messages/{message_id}/files", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "message_id", message_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "order", order)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "after", after)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "before", before)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of message files.

Params:
- thread_id::String (required)
- message_id::String (required)
- limit::Int64
- order::String
- after::String
- before::String

Return: ListMessageFilesResponse, OpenAPI.Clients.ApiResponse
"""
function list_message_files(_api::AssistantsApi, thread_id::String, message_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_message_files(_api, thread_id, message_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_message_files(_api::AssistantsApi, response_stream::Channel, thread_id::String, message_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_message_files(_api, thread_id, message_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_messages_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListMessagesResponse,
)

function _oacinternal_list_messages(_api::AssistantsApi, thread_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_messages_AssistantsApi, "/threads/{thread_id}/messages", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "order", order)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "after", after)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "before", before)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of messages for a given thread.

Params:
- thread_id::String (required)
- limit::Int64
- order::String
- after::String
- before::String

Return: ListMessagesResponse, OpenAPI.Clients.ApiResponse
"""
function list_messages(_api::AssistantsApi, thread_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_messages(_api, thread_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_messages(_api::AssistantsApi, response_stream::Channel, thread_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_messages(_api, thread_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_run_steps_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListRunStepsResponse,
)

function _oacinternal_list_run_steps(_api::AssistantsApi, thread_id::String, run_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_run_steps_AssistantsApi, "/threads/{thread_id}/runs/{run_id}/steps", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "run_id", run_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "order", order)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "after", after)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "before", before)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of run steps belonging to a run.

Params:
- thread_id::String (required)
- run_id::String (required)
- limit::Int64
- order::String
- after::String
- before::String

Return: ListRunStepsResponse, OpenAPI.Clients.ApiResponse
"""
function list_run_steps(_api::AssistantsApi, thread_id::String, run_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_run_steps(_api, thread_id, run_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_run_steps(_api::AssistantsApi, response_stream::Channel, thread_id::String, run_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_run_steps(_api, thread_id, run_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_runs_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListRunsResponse,
)

function _oacinternal_list_runs(_api::AssistantsApi, thread_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_runs_AssistantsApi, "/threads/{thread_id}/runs", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "limit", limit)  # type Int64
    OpenAPI.Clients.set_param(_ctx.query, "order", order)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "after", after)  # type String
    OpenAPI.Clients.set_param(_ctx.query, "before", before)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of runs belonging to a thread.

Params:
- thread_id::String (required)
- limit::Int64
- order::String
- after::String
- before::String

Return: ListRunsResponse, OpenAPI.Clients.ApiResponse
"""
function list_runs(_api::AssistantsApi, thread_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_runs(_api, thread_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_runs(_api::AssistantsApi, response_stream::Channel, thread_id::String; limit=nothing, order=nothing, after=nothing, before=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_runs(_api, thread_id; limit=limit, order=order, after=after, before=before, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_modify_assistant_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => AssistantObject,
)

function _oacinternal_modify_assistant(_api::AssistantsApi, assistant_id::String, modify_assistant_request::ModifyAssistantRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_modify_assistant_AssistantsApi, "/assistants/{assistant_id}", ["ApiKeyAuth", ], modify_assistant_request)
    OpenAPI.Clients.set_param(_ctx.path, "assistant_id", assistant_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Modifies an assistant.

Params:
- assistant_id::String (required)
- modify_assistant_request::ModifyAssistantRequest (required)

Return: AssistantObject, OpenAPI.Clients.ApiResponse
"""
function modify_assistant(_api::AssistantsApi, assistant_id::String, modify_assistant_request::ModifyAssistantRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_assistant(_api, assistant_id, modify_assistant_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function modify_assistant(_api::AssistantsApi, response_stream::Channel, assistant_id::String, modify_assistant_request::ModifyAssistantRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_assistant(_api, assistant_id, modify_assistant_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_modify_message_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => MessageObject,
)

function _oacinternal_modify_message(_api::AssistantsApi, thread_id::String, message_id::String, modify_message_request::ModifyMessageRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_modify_message_AssistantsApi, "/threads/{thread_id}/messages/{message_id}", ["ApiKeyAuth", ], modify_message_request)
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "message_id", message_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Modifies a message.

Params:
- thread_id::String (required)
- message_id::String (required)
- modify_message_request::ModifyMessageRequest (required)

Return: MessageObject, OpenAPI.Clients.ApiResponse
"""
function modify_message(_api::AssistantsApi, thread_id::String, message_id::String, modify_message_request::ModifyMessageRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_message(_api, thread_id, message_id, modify_message_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function modify_message(_api::AssistantsApi, response_stream::Channel, thread_id::String, message_id::String, modify_message_request::ModifyMessageRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_message(_api, thread_id, message_id, modify_message_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_modify_run_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunObject,
)

function _oacinternal_modify_run(_api::AssistantsApi, thread_id::String, run_id::String, modify_run_request::ModifyRunRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_modify_run_AssistantsApi, "/threads/{thread_id}/runs/{run_id}", ["ApiKeyAuth", ], modify_run_request)
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "run_id", run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Modifies a run.

Params:
- thread_id::String (required)
- run_id::String (required)
- modify_run_request::ModifyRunRequest (required)

Return: RunObject, OpenAPI.Clients.ApiResponse
"""
function modify_run(_api::AssistantsApi, thread_id::String, run_id::String, modify_run_request::ModifyRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_run(_api, thread_id, run_id, modify_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function modify_run(_api::AssistantsApi, response_stream::Channel, thread_id::String, run_id::String, modify_run_request::ModifyRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_run(_api, thread_id, run_id, modify_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_modify_thread_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ThreadObject,
)

function _oacinternal_modify_thread(_api::AssistantsApi, thread_id::String, modify_thread_request::ModifyThreadRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_modify_thread_AssistantsApi, "/threads/{thread_id}", ["ApiKeyAuth", ], modify_thread_request)
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Modifies a thread.

Params:
- thread_id::String (required)
- modify_thread_request::ModifyThreadRequest (required)

Return: ThreadObject, OpenAPI.Clients.ApiResponse
"""
function modify_thread(_api::AssistantsApi, thread_id::String, modify_thread_request::ModifyThreadRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_thread(_api, thread_id, modify_thread_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function modify_thread(_api::AssistantsApi, response_stream::Channel, thread_id::String, modify_thread_request::ModifyThreadRequest; _mediaType=nothing)
    _ctx = _oacinternal_modify_thread(_api, thread_id, modify_thread_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_submit_tool_ouputs_to_run_AssistantsApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => RunObject,
)

function _oacinternal_submit_tool_ouputs_to_run(_api::AssistantsApi, thread_id::String, run_id::String, submit_tool_outputs_run_request::SubmitToolOutputsRunRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_submit_tool_ouputs_to_run_AssistantsApi, "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs", ["ApiKeyAuth", ], submit_tool_outputs_run_request)
    OpenAPI.Clients.set_param(_ctx.path, "thread_id", thread_id)  # type String
    OpenAPI.Clients.set_param(_ctx.path, "run_id", run_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request. 

Params:
- thread_id::String (required)
- run_id::String (required)
- submit_tool_outputs_run_request::SubmitToolOutputsRunRequest (required)

Return: RunObject, OpenAPI.Clients.ApiResponse
"""
function submit_tool_ouputs_to_run(_api::AssistantsApi, thread_id::String, run_id::String, submit_tool_outputs_run_request::SubmitToolOutputsRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_submit_tool_ouputs_to_run(_api, thread_id, run_id, submit_tool_outputs_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function submit_tool_ouputs_to_run(_api::AssistantsApi, response_stream::Channel, thread_id::String, run_id::String, submit_tool_outputs_run_request::SubmitToolOutputsRunRequest; _mediaType=nothing)
    _ctx = _oacinternal_submit_tool_ouputs_to_run(_api, thread_id, run_id, submit_tool_outputs_run_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export cancel_run
export create_assistant
export create_assistant_file
export create_message
export create_run
export create_thread
export create_thread_and_run
export delete_assistant
export delete_assistant_file
export delete_thread
export get_assistant
export get_assistant_file
export get_message
export get_message_file
export get_run
export get_run_step
export get_thread
export list_assistant_files
export list_assistants
export list_message_files
export list_messages
export list_run_steps
export list_runs
export modify_assistant
export modify_message
export modify_run
export modify_thread
export submit_tool_ouputs_to_run
