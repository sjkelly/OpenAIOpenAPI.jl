# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct FilesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `FilesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ FilesApi }) = "https://api.openai.com/v1"

const _returntypes_create_file_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OpenAIFile,
)

function _oacinternal_create_file(_api::FilesApi, file::Vector{UInt8}, purpose::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_file_FilesApi, "/files", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "file", file)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.form, "purpose", purpose)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Upload a file that can be used across various endpoints. The size of all the files uploaded by one organization can be up to 100 GB.  The size of individual files can be a maximum of 512 MB. See the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files supported. The Fine-tuning API only supports `.jsonl` files.  Please [contact us](https://help.openai.com/) if you need to increase these storage limits. 

Params:
- file::String (required)
- purpose::String (required)

Return: OpenAIFile, OpenAPI.Clients.ApiResponse
"""
function create_file(_api::FilesApi, file::String, purpose::String; _mediaType=nothing)
    _ctx = _oacinternal_create_file(_api, file, purpose; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_file(_api::FilesApi, response_stream::Channel, file::String, purpose::String; _mediaType=nothing)
    _ctx = _oacinternal_create_file(_api, file, purpose; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_delete_file_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => DeleteFileResponse,
)

function _oacinternal_delete_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "DELETE", _returntypes_delete_file_FilesApi, "/files/{file_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete a file.

Params:
- file_id::String (required)

Return: DeleteFileResponse, OpenAPI.Clients.ApiResponse
"""
function delete_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function delete_file(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_delete_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_download_file_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => String,
)

function _oacinternal_download_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_download_file_FilesApi, "/files/{file_id}/content", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns the contents of the specified file.

Params:
- file_id::String (required)

Return: String, OpenAPI.Clients.ApiResponse
"""
function download_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_download_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function download_file(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_download_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_list_files_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ListFilesResponse,
)

function _oacinternal_list_files(_api::FilesApi; purpose=nothing, _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_list_files_FilesApi, "/files", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.query, "purpose", purpose)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns a list of files that belong to the user's organization.

Params:
- purpose::String

Return: ListFilesResponse, OpenAPI.Clients.ApiResponse
"""
function list_files(_api::FilesApi; purpose=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_files(_api; purpose=purpose, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function list_files(_api::FilesApi, response_stream::Channel; purpose=nothing, _mediaType=nothing)
    _ctx = _oacinternal_list_files(_api; purpose=purpose, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_retrieve_file_FilesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => OpenAIFile,
)

function _oacinternal_retrieve_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "GET", _returntypes_retrieve_file_FilesApi, "/files/{file_id}", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.path, "file_id", file_id)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns information about a specific file.

Params:
- file_id::String (required)

Return: OpenAIFile, OpenAPI.Clients.ApiResponse
"""
function retrieve_file(_api::FilesApi, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function retrieve_file(_api::FilesApi, response_stream::Channel, file_id::String; _mediaType=nothing)
    _ctx = _oacinternal_retrieve_file(_api, file_id; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_file
export delete_file
export download_file
export list_files
export retrieve_file
