# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct ImagesApi <: OpenAPI.APIClientImpl
    client::OpenAPI.Clients.Client
end

"""
The default API base path for APIs in `ImagesApi`.
This can be used to construct the `OpenAPI.Clients.Client` instance.
"""
basepath(::Type{ ImagesApi }) = "https://api.openai.com/v1"

const _returntypes_create_image_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImagesResponse,
)

function _oacinternal_create_image(_api::ImagesApi, create_image_request::CreateImageRequest; _mediaType=nothing)
    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_image_ImagesApi, "/images/generations", ["ApiKeyAuth", ], create_image_request)
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates an image given a prompt.

Params:
- create_image_request::CreateImageRequest (required)

Return: ImagesResponse, OpenAPI.Clients.ApiResponse
"""
function create_image(_api::ImagesApi, create_image_request::CreateImageRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_image(_api, create_image_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_image(_api::ImagesApi, response_stream::Channel, create_image_request::CreateImageRequest; _mediaType=nothing)
    _ctx = _oacinternal_create_image(_api, create_image_request; _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_image_edit_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImagesResponse,
)

function _oacinternal_create_image_edit(_api::ImagesApi, image::Vector{UInt8}, prompt::String; mask=nothing, model=nothing, n=nothing, size=nothing, response_format=nothing, user=nothing, _mediaType=nothing)
    OpenAPI.validate_param("n", "create_image_edit", :maximum, n, 10, false)
    OpenAPI.validate_param("n", "create_image_edit", :minimum, n, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_image_edit_ImagesApi, "/images/edits", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "image", image)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.form, "prompt", prompt)  # type String
    OpenAPI.Clients.set_param(_ctx.file, "mask", mask)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.form, "model", model)  # type CreateImageEditRequestModel
    OpenAPI.Clients.set_param(_ctx.form, "n", n)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "size", size)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "response_format", response_format)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "user", user)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates an edited or extended image given an original image and a prompt.

Params:
- image::String (required)
- prompt::String (required)
- mask::String
- model::CreateImageEditRequestModel
- n::Int64
- size::String
- response_format::String
- user::String

Return: ImagesResponse, OpenAPI.Clients.ApiResponse
"""
function create_image_edit(_api::ImagesApi, image::String, prompt::String; mask=nothing, model=nothing, n=nothing, size=nothing, response_format=nothing, user=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_image_edit(_api, image, prompt; mask=mask, model=model, n=n, size=size, response_format=response_format, user=user, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_image_edit(_api::ImagesApi, response_stream::Channel, image::String, prompt::String; mask=nothing, model=nothing, n=nothing, size=nothing, response_format=nothing, user=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_image_edit(_api, image, prompt; mask=mask, model=model, n=n, size=size, response_format=response_format, user=user, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

const _returntypes_create_image_variation_ImagesApi = Dict{Regex,Type}(
    Regex("^" * replace("200", "x"=>".") * "\$") => ImagesResponse,
)

function _oacinternal_create_image_variation(_api::ImagesApi, image::Vector{UInt8}; model=nothing, n=nothing, response_format=nothing, size=nothing, user=nothing, _mediaType=nothing)
    OpenAPI.validate_param("n", "create_image_variation", :maximum, n, 10, false)
    OpenAPI.validate_param("n", "create_image_variation", :minimum, n, 1, false)

    _ctx = OpenAPI.Clients.Ctx(_api.client, "POST", _returntypes_create_image_variation_ImagesApi, "/images/variations", ["ApiKeyAuth", ])
    OpenAPI.Clients.set_param(_ctx.file, "image", image)  # type Vector{UInt8}
    OpenAPI.Clients.set_param(_ctx.form, "model", model)  # type CreateImageEditRequestModel
    OpenAPI.Clients.set_param(_ctx.form, "n", n)  # type Int64
    OpenAPI.Clients.set_param(_ctx.form, "response_format", response_format)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "size", size)  # type String
    OpenAPI.Clients.set_param(_ctx.form, "user", user)  # type String
    OpenAPI.Clients.set_header_accept(_ctx, ["application/json", ])
    OpenAPI.Clients.set_header_content_type(_ctx, (_mediaType === nothing) ? ["multipart/form-data", ] : [_mediaType])
    return _ctx
end

@doc raw"""Creates a variation of a given image.

Params:
- image::String (required)
- model::CreateImageEditRequestModel
- n::Int64
- response_format::String
- size::String
- user::String

Return: ImagesResponse, OpenAPI.Clients.ApiResponse
"""
function create_image_variation(_api::ImagesApi, image::String; model=nothing, n=nothing, response_format=nothing, size=nothing, user=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_image_variation(_api, image; model=model, n=n, response_format=response_format, size=size, user=user, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx)
end

function create_image_variation(_api::ImagesApi, response_stream::Channel, image::String; model=nothing, n=nothing, response_format=nothing, size=nothing, user=nothing, _mediaType=nothing)
    _ctx = _oacinternal_create_image_variation(_api, image; model=model, n=n, response_format=response_format, size=size, user=user, _mediaType=_mediaType)
    return OpenAPI.Clients.exec(_ctx, response_stream)
end

export create_image
export create_image_edit
export create_image_variation
