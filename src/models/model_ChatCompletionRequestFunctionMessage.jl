# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionRequestFunctionMessage

    ChatCompletionRequestFunctionMessage(;
        role=nothing,
        arguments=nothing,
        name=nothing,
    )

    - role::String : The role of the messages author, in this case &#x60;function&#x60;.
    - arguments::String : The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
    - name::String : The name of the function to call.
"""
Base.@kwdef mutable struct ChatCompletionRequestFunctionMessage <: OpenAPI.APIModel
    role::Union{Nothing, String} = nothing
    arguments::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing

    function ChatCompletionRequestFunctionMessage(role, arguments, name, )
        OpenAPI.validate_property(ChatCompletionRequestFunctionMessage, Symbol("role"), role)
        OpenAPI.validate_property(ChatCompletionRequestFunctionMessage, Symbol("arguments"), arguments)
        OpenAPI.validate_property(ChatCompletionRequestFunctionMessage, Symbol("name"), name)
        return new(role, arguments, name, )
    end
end # type ChatCompletionRequestFunctionMessage

const _property_types_ChatCompletionRequestFunctionMessage = Dict{Symbol,String}(Symbol("role")=>"String", Symbol("arguments")=>"String", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ ChatCompletionRequestFunctionMessage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionRequestFunctionMessage[name]))}

function check_required(o::ChatCompletionRequestFunctionMessage)
    o.role === nothing && (return false)
    o.arguments === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionRequestFunctionMessage }, name::Symbol, val)
    if name === Symbol("role")
        OpenAPI.validate_param(name, "ChatCompletionRequestFunctionMessage", :enum, val, ["function"])
    end
end
