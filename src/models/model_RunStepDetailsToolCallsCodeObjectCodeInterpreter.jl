# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunStepDetailsToolCallsCodeObject_code_interpreter
The Code Interpreter tool call definition.

    RunStepDetailsToolCallsCodeObjectCodeInterpreter(;
        input=nothing,
        outputs=nothing,
    )

    - input::String : The input to the Code Interpreter tool call.
    - outputs::Vector{RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner} : The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (&#x60;logs&#x60;) or images (&#x60;image&#x60;). Each of these are represented by a different object type.
"""
Base.@kwdef mutable struct RunStepDetailsToolCallsCodeObjectCodeInterpreter <: OpenAPI.APIModel
    input::Union{Nothing, String} = nothing
    outputs::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner} }

    function RunStepDetailsToolCallsCodeObjectCodeInterpreter(input, outputs, )
        OpenAPI.validate_property(RunStepDetailsToolCallsCodeObjectCodeInterpreter, Symbol("input"), input)
        OpenAPI.validate_property(RunStepDetailsToolCallsCodeObjectCodeInterpreter, Symbol("outputs"), outputs)
        return new(input, outputs, )
    end
end # type RunStepDetailsToolCallsCodeObjectCodeInterpreter

const _property_types_RunStepDetailsToolCallsCodeObjectCodeInterpreter = Dict{Symbol,String}(Symbol("input")=>"String", Symbol("outputs")=>"Vector{RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsInner}", )
OpenAPI.property_type(::Type{ RunStepDetailsToolCallsCodeObjectCodeInterpreter }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunStepDetailsToolCallsCodeObjectCodeInterpreter[name]))}

function check_required(o::RunStepDetailsToolCallsCodeObjectCodeInterpreter)
    o.input === nothing && (return false)
    o.outputs === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RunStepDetailsToolCallsCodeObjectCodeInterpreter }, name::Symbol, val)
end
