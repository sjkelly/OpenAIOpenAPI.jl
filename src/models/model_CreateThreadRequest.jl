# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateThreadRequest

    CreateThreadRequest(;
        messages=nothing,
        metadata=nothing,
    )

    - messages::Vector{CreateMessageRequest} : A list of [messages](/docs/api-reference/messages) to start the thread with.
    - metadata::Any : Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
"""
Base.@kwdef mutable struct CreateThreadRequest <: OpenAPI.APIModel
    messages::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateMessageRequest} }
    metadata::Union{Nothing, Any} = nothing

    function CreateThreadRequest(messages, metadata, )
        OpenAPI.validate_property(CreateThreadRequest, Symbol("messages"), messages)
        OpenAPI.validate_property(CreateThreadRequest, Symbol("metadata"), metadata)
        return new(messages, metadata, )
    end
end # type CreateThreadRequest

const _property_types_CreateThreadRequest = Dict{Symbol,String}(Symbol("messages")=>"Vector{CreateMessageRequest}", Symbol("metadata")=>"Any", )
OpenAPI.property_type(::Type{ CreateThreadRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateThreadRequest[name]))}

function check_required(o::CreateThreadRequest)
    true
end

function OpenAPI.validate_property(::Type{ CreateThreadRequest }, name::Symbol, val)
end
