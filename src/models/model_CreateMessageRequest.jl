# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateMessageRequest

    CreateMessageRequest(;
        role=nothing,
        content=nothing,
        file_ids=nothing,
        metadata=nothing,
    )

    - role::String : The role of the entity that is creating the message. Currently only &#x60;user&#x60; is supported.
    - content::String : The content of the message.
    - file_ids::Vector{String} : A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a maximum of 10 files attached to a message. Useful for tools like &#x60;retrieval&#x60; and &#x60;code_interpreter&#x60; that can access and use files.
    - metadata::Any : Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
"""
Base.@kwdef mutable struct CreateMessageRequest <: OpenAPI.APIModel
    role::Union{Nothing, String} = nothing
    content::Union{Nothing, String} = nothing
    file_ids::Union{Nothing, Vector{String}} = nothing
    metadata::Union{Nothing, Any} = nothing

    function CreateMessageRequest(role, content, file_ids, metadata, )
        OpenAPI.validate_property(CreateMessageRequest, Symbol("role"), role)
        OpenAPI.validate_property(CreateMessageRequest, Symbol("content"), content)
        OpenAPI.validate_property(CreateMessageRequest, Symbol("file_ids"), file_ids)
        OpenAPI.validate_property(CreateMessageRequest, Symbol("metadata"), metadata)
        return new(role, content, file_ids, metadata, )
    end
end # type CreateMessageRequest

const _property_types_CreateMessageRequest = Dict{Symbol,String}(Symbol("role")=>"String", Symbol("content")=>"String", Symbol("file_ids")=>"Vector{String}", Symbol("metadata")=>"Any", )
OpenAPI.property_type(::Type{ CreateMessageRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateMessageRequest[name]))}

function check_required(o::CreateMessageRequest)
    o.role === nothing && (return false)
    o.content === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateMessageRequest }, name::Symbol, val)
    if name === Symbol("role")
        OpenAPI.validate_param(name, "CreateMessageRequest", :enum, val, ["user"])
    end
    if name === Symbol("content")
        OpenAPI.validate_param(name, "CreateMessageRequest", :maxLength, val, 32768)
        OpenAPI.validate_param(name, "CreateMessageRequest", :minLength, val, 1)
    end
    if name === Symbol("file_ids")
        OpenAPI.validate_param(name, "CreateMessageRequest", :maxItems, val, 10)
        OpenAPI.validate_param(name, "CreateMessageRequest", :minItems, val, 1)
    end
end
