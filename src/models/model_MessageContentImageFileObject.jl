# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MessageContentImageFileObject
References an image [File](/docs/api-reference/files) in the content of a message.

    MessageContentImageFileObject(;
        type=nothing,
        image_file=nothing,
    )

    - type::String : Always &#x60;image_file&#x60;.
    - image_file::MessageContentImageFileObjectImageFile
"""
Base.@kwdef mutable struct MessageContentImageFileObject <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    image_file = nothing # spec type: Union{ Nothing, MessageContentImageFileObjectImageFile }

    function MessageContentImageFileObject(type, image_file, )
        OpenAPI.validate_property(MessageContentImageFileObject, Symbol("type"), type)
        OpenAPI.validate_property(MessageContentImageFileObject, Symbol("image_file"), image_file)
        return new(type, image_file, )
    end
end # type MessageContentImageFileObject

const _property_types_MessageContentImageFileObject = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("image_file")=>"MessageContentImageFileObjectImageFile", )
OpenAPI.property_type(::Type{ MessageContentImageFileObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MessageContentImageFileObject[name]))}

function check_required(o::MessageContentImageFileObject)
    o.type === nothing && (return false)
    o.image_file === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ MessageContentImageFileObject }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "MessageContentImageFileObject", :enum, val, ["image_file"])
    end
end
