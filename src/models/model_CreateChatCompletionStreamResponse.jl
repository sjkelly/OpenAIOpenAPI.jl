# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateChatCompletionStreamResponse
Represents a streamed chunk of a chat completion response returned by model, based on the provided input.

    CreateChatCompletionStreamResponse(;
        id=nothing,
        choices=nothing,
        created=nothing,
        model=nothing,
        system_fingerprint=nothing,
        object=nothing,
    )

    - id::String : A unique identifier for the chat completion. Each chunk has the same ID.
    - choices::Vector{CreateChatCompletionStreamResponseChoicesInner} : A list of chat completion choices. Can be more than one if &#x60;n&#x60; is greater than 1.
    - created::Int64 : The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
    - model::String : The model to generate the completion.
    - system_fingerprint::String : This fingerprint represents the backend configuration that the model runs with. Can be used in conjunction with the &#x60;seed&#x60; request parameter to understand when backend changes have been made that might impact determinism. 
    - object::String : The object type, which is always &#x60;chat.completion.chunk&#x60;.
"""
Base.@kwdef mutable struct CreateChatCompletionStreamResponse <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    choices::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateChatCompletionStreamResponseChoicesInner} }
    created::Union{Nothing, Int64} = nothing
    model::Union{Nothing, String} = nothing
    system_fingerprint::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing

    function CreateChatCompletionStreamResponse(id, choices, created, model, system_fingerprint, object, )
        OpenAPI.validate_property(CreateChatCompletionStreamResponse, Symbol("id"), id)
        OpenAPI.validate_property(CreateChatCompletionStreamResponse, Symbol("choices"), choices)
        OpenAPI.validate_property(CreateChatCompletionStreamResponse, Symbol("created"), created)
        OpenAPI.validate_property(CreateChatCompletionStreamResponse, Symbol("model"), model)
        OpenAPI.validate_property(CreateChatCompletionStreamResponse, Symbol("system_fingerprint"), system_fingerprint)
        OpenAPI.validate_property(CreateChatCompletionStreamResponse, Symbol("object"), object)
        return new(id, choices, created, model, system_fingerprint, object, )
    end
end # type CreateChatCompletionStreamResponse

const _property_types_CreateChatCompletionStreamResponse = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("choices")=>"Vector{CreateChatCompletionStreamResponseChoicesInner}", Symbol("created")=>"Int64", Symbol("model")=>"String", Symbol("system_fingerprint")=>"String", Symbol("object")=>"String", )
OpenAPI.property_type(::Type{ CreateChatCompletionStreamResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateChatCompletionStreamResponse[name]))}

function check_required(o::CreateChatCompletionStreamResponse)
    o.id === nothing && (return false)
    o.choices === nothing && (return false)
    o.created === nothing && (return false)
    o.model === nothing && (return false)
    o.object === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateChatCompletionStreamResponse }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "CreateChatCompletionStreamResponse", :enum, val, ["chat.completion.chunk"])
    end
end
