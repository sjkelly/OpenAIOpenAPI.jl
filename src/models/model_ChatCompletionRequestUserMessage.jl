# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionRequestUserMessage

    ChatCompletionRequestUserMessage(;
        content=nothing,
        role=nothing,
        name=nothing,
    )

    - content::ChatCompletionRequestUserMessageContent
    - role::String : The role of the messages author, in this case &#x60;user&#x60;.
    - name::String : An optional name for the participant. Provides the model information to differentiate between participants of the same role.
"""
Base.@kwdef mutable struct ChatCompletionRequestUserMessage <: OpenAPI.APIModel
    content = nothing # spec type: Union{ Nothing, ChatCompletionRequestUserMessageContent }
    role::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing

    function ChatCompletionRequestUserMessage(content, role, name, )
        OpenAPI.validate_property(ChatCompletionRequestUserMessage, Symbol("content"), content)
        OpenAPI.validate_property(ChatCompletionRequestUserMessage, Symbol("role"), role)
        OpenAPI.validate_property(ChatCompletionRequestUserMessage, Symbol("name"), name)
        return new(content, role, name, )
    end
end # type ChatCompletionRequestUserMessage

const _property_types_ChatCompletionRequestUserMessage = Dict{Symbol,String}(Symbol("content")=>"ChatCompletionRequestUserMessageContent", Symbol("role")=>"String", Symbol("name")=>"String", )
OpenAPI.property_type(::Type{ ChatCompletionRequestUserMessage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionRequestUserMessage[name]))}

function check_required(o::ChatCompletionRequestUserMessage)
    o.content === nothing && (return false)
    o.role === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionRequestUserMessage }, name::Symbol, val)
    if name === Symbol("role")
        OpenAPI.validate_param(name, "ChatCompletionRequestUserMessage", :enum, val, ["user"])
    end
end
