# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CompletionUsage
Usage statistics for the completion request.

    CompletionUsage(;
        completion_tokens=nothing,
        prompt_tokens=nothing,
        total_tokens=nothing,
    )

    - completion_tokens::Int64 : Number of tokens in the generated completion.
    - prompt_tokens::Int64 : Number of tokens in the prompt.
    - total_tokens::Int64 : Total number of tokens used in the request (prompt + completion).
"""
Base.@kwdef mutable struct CompletionUsage <: OpenAPI.APIModel
    completion_tokens::Union{Nothing, Int64} = nothing
    prompt_tokens::Union{Nothing, Int64} = nothing
    total_tokens::Union{Nothing, Int64} = nothing

    function CompletionUsage(completion_tokens, prompt_tokens, total_tokens, )
        OpenAPI.validate_property(CompletionUsage, Symbol("completion_tokens"), completion_tokens)
        OpenAPI.validate_property(CompletionUsage, Symbol("prompt_tokens"), prompt_tokens)
        OpenAPI.validate_property(CompletionUsage, Symbol("total_tokens"), total_tokens)
        return new(completion_tokens, prompt_tokens, total_tokens, )
    end
end # type CompletionUsage

const _property_types_CompletionUsage = Dict{Symbol,String}(Symbol("completion_tokens")=>"Int64", Symbol("prompt_tokens")=>"Int64", Symbol("total_tokens")=>"Int64", )
OpenAPI.property_type(::Type{ CompletionUsage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CompletionUsage[name]))}

function check_required(o::CompletionUsage)
    o.completion_tokens === nothing && (return false)
    o.prompt_tokens === nothing && (return false)
    o.total_tokens === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CompletionUsage }, name::Symbol, val)
end
