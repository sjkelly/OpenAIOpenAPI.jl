# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionRequestMessageContentPartImage

    ChatCompletionRequestMessageContentPartImage(;
        type=nothing,
        image_url=nothing,
    )

    - type::String : The type of the content part.
    - image_url::ChatCompletionRequestMessageContentPartImageImageUrl
"""
Base.@kwdef mutable struct ChatCompletionRequestMessageContentPartImage <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    image_url = nothing # spec type: Union{ Nothing, ChatCompletionRequestMessageContentPartImageImageUrl }

    function ChatCompletionRequestMessageContentPartImage(type, image_url, )
        OpenAPI.validate_property(ChatCompletionRequestMessageContentPartImage, Symbol("type"), type)
        OpenAPI.validate_property(ChatCompletionRequestMessageContentPartImage, Symbol("image_url"), image_url)
        return new(type, image_url, )
    end
end # type ChatCompletionRequestMessageContentPartImage

const _property_types_ChatCompletionRequestMessageContentPartImage = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("image_url")=>"ChatCompletionRequestMessageContentPartImageImageUrl", )
OpenAPI.property_type(::Type{ ChatCompletionRequestMessageContentPartImage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionRequestMessageContentPartImage[name]))}

function check_required(o::ChatCompletionRequestMessageContentPartImage)
    o.type === nothing && (return false)
    o.image_url === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionRequestMessageContentPartImage }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ChatCompletionRequestMessageContentPartImage", :enum, val, ["image_url"])
    end
end
