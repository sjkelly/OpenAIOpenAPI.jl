# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionNamedToolChoice
Specifies a tool the model should use. Use to force the model to call a specific function.

    ChatCompletionNamedToolChoice(;
        type=nothing,
        var"function"=nothing,
    )

    - type::String : The type of the tool. Currently, only &#x60;function&#x60; is supported.
    - var"function"::ChatCompletionNamedToolChoiceFunction
"""
Base.@kwdef mutable struct ChatCompletionNamedToolChoice <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    var"function" = nothing # spec type: Union{ Nothing, ChatCompletionNamedToolChoiceFunction }

    function ChatCompletionNamedToolChoice(type, var"function", )
        OpenAPI.validate_property(ChatCompletionNamedToolChoice, Symbol("type"), type)
        OpenAPI.validate_property(ChatCompletionNamedToolChoice, Symbol("function"), var"function")
        return new(type, var"function", )
    end
end # type ChatCompletionNamedToolChoice

const _property_types_ChatCompletionNamedToolChoice = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("function")=>"ChatCompletionNamedToolChoiceFunction", )
OpenAPI.property_type(::Type{ ChatCompletionNamedToolChoice }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionNamedToolChoice[name]))}

function check_required(o::ChatCompletionNamedToolChoice)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionNamedToolChoice }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "ChatCompletionNamedToolChoice", :enum, val, ["function"])
    end
end
