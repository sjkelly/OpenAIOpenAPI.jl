# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""OpenAIFile
The &#x60;File&#x60; object represents a document that has been uploaded to OpenAI.

    OpenAIFile(;
        id=nothing,
        bytes=nothing,
        created_at=nothing,
        filename=nothing,
        object=nothing,
        purpose=nothing,
        status=nothing,
        status_details=nothing,
    )

    - id::String : The file identifier, which can be referenced in the API endpoints.
    - bytes::Int64 : The size of the file, in bytes.
    - created_at::Int64 : The Unix timestamp (in seconds) for when the file was created.
    - filename::String : The name of the file.
    - object::String : The object type, which is always &#x60;file&#x60;.
    - purpose::String : The intended purpose of the file. Supported values are &#x60;fine-tune&#x60;, &#x60;fine-tune-results&#x60;, &#x60;assistants&#x60;, and &#x60;assistants_output&#x60;.
    - status::String : Deprecated. The current status of the file, which can be either &#x60;uploaded&#x60;, &#x60;processed&#x60;, or &#x60;error&#x60;.
    - status_details::String : Deprecated. For details on why a fine-tuning training file failed validation, see the &#x60;error&#x60; field on &#x60;fine_tuning.job&#x60;.
"""
Base.@kwdef mutable struct OpenAIFile <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    bytes::Union{Nothing, Int64} = nothing
    created_at::Union{Nothing, Int64} = nothing
    filename::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing
    purpose::Union{Nothing, String} = nothing
    status::Union{Nothing, String} = nothing
    status_details::Union{Nothing, String} = nothing

    function OpenAIFile(id, bytes, created_at, filename, object, purpose, status, status_details, )
        OpenAPI.validate_property(OpenAIFile, Symbol("id"), id)
        OpenAPI.validate_property(OpenAIFile, Symbol("bytes"), bytes)
        OpenAPI.validate_property(OpenAIFile, Symbol("created_at"), created_at)
        OpenAPI.validate_property(OpenAIFile, Symbol("filename"), filename)
        OpenAPI.validate_property(OpenAIFile, Symbol("object"), object)
        OpenAPI.validate_property(OpenAIFile, Symbol("purpose"), purpose)
        OpenAPI.validate_property(OpenAIFile, Symbol("status"), status)
        OpenAPI.validate_property(OpenAIFile, Symbol("status_details"), status_details)
        return new(id, bytes, created_at, filename, object, purpose, status, status_details, )
    end
end # type OpenAIFile

const _property_types_OpenAIFile = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("bytes")=>"Int64", Symbol("created_at")=>"Int64", Symbol("filename")=>"String", Symbol("object")=>"String", Symbol("purpose")=>"String", Symbol("status")=>"String", Symbol("status_details")=>"String", )
OpenAPI.property_type(::Type{ OpenAIFile }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_OpenAIFile[name]))}

function check_required(o::OpenAIFile)
    o.id === nothing && (return false)
    o.bytes === nothing && (return false)
    o.created_at === nothing && (return false)
    o.filename === nothing && (return false)
    o.object === nothing && (return false)
    o.purpose === nothing && (return false)
    o.status === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ OpenAIFile }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "OpenAIFile", :enum, val, ["file"])
    end
    if name === Symbol("purpose")
        OpenAPI.validate_param(name, "OpenAIFile", :enum, val, ["fine-tune", "fine-tune-results", "assistants", "assistants_output"])
    end
    if name === Symbol("status")
        OpenAPI.validate_param(name, "OpenAIFile", :enum, val, ["uploaded", "processed", "error"])
    end
end
