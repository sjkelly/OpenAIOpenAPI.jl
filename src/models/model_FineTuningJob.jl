# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FineTuningJob
The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 

    FineTuningJob(;
        id=nothing,
        created_at=nothing,
        error=nothing,
        fine_tuned_model=nothing,
        finished_at=nothing,
        hyperparameters=nothing,
        model=nothing,
        object=nothing,
        organization_id=nothing,
        result_files=nothing,
        status=nothing,
        trained_tokens=nothing,
        training_file=nothing,
        validation_file=nothing,
    )

    - id::String : The object identifier, which can be referenced in the API endpoints.
    - created_at::Int64 : The Unix timestamp (in seconds) for when the fine-tuning job was created.
    - error::FineTuningJobError
    - fine_tuned_model::String : The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
    - finished_at::Int64 : The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
    - hyperparameters::FineTuningJobHyperparameters
    - model::String : The base model that is being fine-tuned.
    - object::String : The object type, which is always \&quot;fine_tuning.job\&quot;.
    - organization_id::String : The organization that owns the fine-tuning job.
    - result_files::Vector{String} : The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
    - status::String : The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
    - trained_tokens::Int64 : The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
    - training_file::String : The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
    - validation_file::String : The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
"""
Base.@kwdef mutable struct FineTuningJob <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    created_at::Union{Nothing, Int64} = nothing
    error = nothing # spec type: Union{ Nothing, FineTuningJobError }
    fine_tuned_model::Union{Nothing, String} = nothing
    finished_at::Union{Nothing, Int64} = nothing
    hyperparameters = nothing # spec type: Union{ Nothing, FineTuningJobHyperparameters }
    model::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing
    organization_id::Union{Nothing, String} = nothing
    result_files::Union{Nothing, Vector{String}} = nothing
    status::Union{Nothing, String} = nothing
    trained_tokens::Union{Nothing, Int64} = nothing
    training_file::Union{Nothing, String} = nothing
    validation_file::Union{Nothing, String} = nothing

    function FineTuningJob(id, created_at, error, fine_tuned_model, finished_at, hyperparameters, model, object, organization_id, result_files, status, trained_tokens, training_file, validation_file, )
        OpenAPI.validate_property(FineTuningJob, Symbol("id"), id)
        OpenAPI.validate_property(FineTuningJob, Symbol("created_at"), created_at)
        OpenAPI.validate_property(FineTuningJob, Symbol("error"), error)
        OpenAPI.validate_property(FineTuningJob, Symbol("fine_tuned_model"), fine_tuned_model)
        OpenAPI.validate_property(FineTuningJob, Symbol("finished_at"), finished_at)
        OpenAPI.validate_property(FineTuningJob, Symbol("hyperparameters"), hyperparameters)
        OpenAPI.validate_property(FineTuningJob, Symbol("model"), model)
        OpenAPI.validate_property(FineTuningJob, Symbol("object"), object)
        OpenAPI.validate_property(FineTuningJob, Symbol("organization_id"), organization_id)
        OpenAPI.validate_property(FineTuningJob, Symbol("result_files"), result_files)
        OpenAPI.validate_property(FineTuningJob, Symbol("status"), status)
        OpenAPI.validate_property(FineTuningJob, Symbol("trained_tokens"), trained_tokens)
        OpenAPI.validate_property(FineTuningJob, Symbol("training_file"), training_file)
        OpenAPI.validate_property(FineTuningJob, Symbol("validation_file"), validation_file)
        return new(id, created_at, error, fine_tuned_model, finished_at, hyperparameters, model, object, organization_id, result_files, status, trained_tokens, training_file, validation_file, )
    end
end # type FineTuningJob

const _property_types_FineTuningJob = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("created_at")=>"Int64", Symbol("error")=>"FineTuningJobError", Symbol("fine_tuned_model")=>"String", Symbol("finished_at")=>"Int64", Symbol("hyperparameters")=>"FineTuningJobHyperparameters", Symbol("model")=>"String", Symbol("object")=>"String", Symbol("organization_id")=>"String", Symbol("result_files")=>"Vector{String}", Symbol("status")=>"String", Symbol("trained_tokens")=>"Int64", Symbol("training_file")=>"String", Symbol("validation_file")=>"String", )
OpenAPI.property_type(::Type{ FineTuningJob }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FineTuningJob[name]))}

function check_required(o::FineTuningJob)
    o.id === nothing && (return false)
    o.created_at === nothing && (return false)
    o.error === nothing && (return false)
    o.fine_tuned_model === nothing && (return false)
    o.finished_at === nothing && (return false)
    o.hyperparameters === nothing && (return false)
    o.model === nothing && (return false)
    o.object === nothing && (return false)
    o.organization_id === nothing && (return false)
    o.result_files === nothing && (return false)
    o.status === nothing && (return false)
    o.trained_tokens === nothing && (return false)
    o.training_file === nothing && (return false)
    o.validation_file === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FineTuningJob }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "FineTuningJob", :enum, val, ["fine_tuning.job"])
    end
    if name === Symbol("status")
        OpenAPI.validate_param(name, "FineTuningJob", :enum, val, ["validating_files", "queued", "running", "succeeded", "failed", "cancelled"])
    end
end
