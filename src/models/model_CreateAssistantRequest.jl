# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateAssistantRequest

    CreateAssistantRequest(;
        model=nothing,
        name=nothing,
        description=nothing,
        instructions=nothing,
        tools=nothing,
        file_ids=nothing,
        metadata=nothing,
    )

    - model::String
    - name::String : The name of the assistant. The maximum length is 256 characters. 
    - description::String : The description of the assistant. The maximum length is 512 characters. 
    - instructions::String : The system instructions that the assistant uses. The maximum length is 32768 characters. 
    - tools::Vector{AssistantObjectToolsInner} : A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types &#x60;code_interpreter&#x60;, &#x60;retrieval&#x60;, or &#x60;function&#x60;. 
    - file_ids::Vector{String} : A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum of 20 files attached to the assistant. Files are ordered by their creation date in ascending order. 
    - metadata::Any : Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
"""
Base.@kwdef mutable struct CreateAssistantRequest <: OpenAPI.APIModel
    model::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    instructions::Union{Nothing, String} = nothing
    tools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{AssistantObjectToolsInner} }
    file_ids::Union{Nothing, Vector{String}} = nothing
    metadata::Union{Nothing, Any} = nothing

    function CreateAssistantRequest(model, name, description, instructions, tools, file_ids, metadata, )
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("model"), model)
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("name"), name)
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("description"), description)
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("instructions"), instructions)
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("tools"), tools)
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("file_ids"), file_ids)
        OpenAPI.validate_property(CreateAssistantRequest, Symbol("metadata"), metadata)
        return new(model, name, description, instructions, tools, file_ids, metadata, )
    end
end # type CreateAssistantRequest

const _property_types_CreateAssistantRequest = Dict{Symbol,String}(Symbol("model")=>"String", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("instructions")=>"String", Symbol("tools")=>"Vector{AssistantObjectToolsInner}", Symbol("file_ids")=>"Vector{String}", Symbol("metadata")=>"Any", )
OpenAPI.property_type(::Type{ CreateAssistantRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateAssistantRequest[name]))}

function check_required(o::CreateAssistantRequest)
    o.model === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateAssistantRequest }, name::Symbol, val)
    if name === Symbol("name")
        OpenAPI.validate_param(name, "CreateAssistantRequest", :maxLength, val, 256)
    end
    if name === Symbol("description")
        OpenAPI.validate_param(name, "CreateAssistantRequest", :maxLength, val, 512)
    end
    if name === Symbol("instructions")
        OpenAPI.validate_param(name, "CreateAssistantRequest", :maxLength, val, 32768)
    end
    if name === Symbol("tools")
        OpenAPI.validate_param(name, "CreateAssistantRequest", :maxItems, val, 128)
    end
    if name === Symbol("file_ids")
        OpenAPI.validate_param(name, "CreateAssistantRequest", :maxItems, val, 20)
    end
end
