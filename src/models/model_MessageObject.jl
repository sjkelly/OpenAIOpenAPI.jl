# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""MessageObject
Represents a message within a [thread](/docs/api-reference/threads).

    MessageObject(;
        id=nothing,
        object=nothing,
        created_at=nothing,
        thread_id=nothing,
        role=nothing,
        content=nothing,
        assistant_id=nothing,
        run_id=nothing,
        file_ids=nothing,
        metadata=nothing,
    )

    - id::String : The identifier, which can be referenced in API endpoints.
    - object::String : The object type, which is always &#x60;thread.message&#x60;.
    - created_at::Int64 : The Unix timestamp (in seconds) for when the message was created.
    - thread_id::String : The [thread](/docs/api-reference/threads) ID that this message belongs to.
    - role::String : The entity that produced the message. One of &#x60;user&#x60; or &#x60;assistant&#x60;.
    - content::Vector{MessageObjectContentInner} : The content of the message in array of text and/or images.
    - assistant_id::String : If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
    - run_id::String : If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this message.
    - file_ids::Vector{String} : A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached to a message.
    - metadata::Any : Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
"""
Base.@kwdef mutable struct MessageObject <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing
    created_at::Union{Nothing, Int64} = nothing
    thread_id::Union{Nothing, String} = nothing
    role::Union{Nothing, String} = nothing
    content::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{MessageObjectContentInner} }
    assistant_id::Union{Nothing, String} = nothing
    run_id::Union{Nothing, String} = nothing
    file_ids::Union{Nothing, Vector{String}} = nothing
    metadata::Union{Nothing, Any} = nothing

    function MessageObject(id, object, created_at, thread_id, role, content, assistant_id, run_id, file_ids, metadata, )
        OpenAPI.validate_property(MessageObject, Symbol("id"), id)
        OpenAPI.validate_property(MessageObject, Symbol("object"), object)
        OpenAPI.validate_property(MessageObject, Symbol("created_at"), created_at)
        OpenAPI.validate_property(MessageObject, Symbol("thread_id"), thread_id)
        OpenAPI.validate_property(MessageObject, Symbol("role"), role)
        OpenAPI.validate_property(MessageObject, Symbol("content"), content)
        OpenAPI.validate_property(MessageObject, Symbol("assistant_id"), assistant_id)
        OpenAPI.validate_property(MessageObject, Symbol("run_id"), run_id)
        OpenAPI.validate_property(MessageObject, Symbol("file_ids"), file_ids)
        OpenAPI.validate_property(MessageObject, Symbol("metadata"), metadata)
        return new(id, object, created_at, thread_id, role, content, assistant_id, run_id, file_ids, metadata, )
    end
end # type MessageObject

const _property_types_MessageObject = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("object")=>"String", Symbol("created_at")=>"Int64", Symbol("thread_id")=>"String", Symbol("role")=>"String", Symbol("content")=>"Vector{MessageObjectContentInner}", Symbol("assistant_id")=>"String", Symbol("run_id")=>"String", Symbol("file_ids")=>"Vector{String}", Symbol("metadata")=>"Any", )
OpenAPI.property_type(::Type{ MessageObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_MessageObject[name]))}

function check_required(o::MessageObject)
    o.id === nothing && (return false)
    o.object === nothing && (return false)
    o.created_at === nothing && (return false)
    o.thread_id === nothing && (return false)
    o.role === nothing && (return false)
    o.content === nothing && (return false)
    o.assistant_id === nothing && (return false)
    o.run_id === nothing && (return false)
    o.file_ids === nothing && (return false)
    o.metadata === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ MessageObject }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "MessageObject", :enum, val, ["thread.message"])
    end
    if name === Symbol("role")
        OpenAPI.validate_param(name, "MessageObject", :enum, val, ["user", "assistant"])
    end
    if name === Symbol("file_ids")
        OpenAPI.validate_param(name, "MessageObject", :maxItems, val, 10)
    end
end
