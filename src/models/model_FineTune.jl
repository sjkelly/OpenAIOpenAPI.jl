# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""FineTune
The &#x60;FineTune&#x60; object represents a legacy fine-tune job that has been created through the API. 

    FineTune(;
        id=nothing,
        created_at=nothing,
        events=nothing,
        fine_tuned_model=nothing,
        hyperparams=nothing,
        model=nothing,
        object=nothing,
        organization_id=nothing,
        result_files=nothing,
        status=nothing,
        training_files=nothing,
        updated_at=nothing,
        validation_files=nothing,
    )

    - id::String : The object identifier, which can be referenced in the API endpoints.
    - created_at::Int64 : The Unix timestamp (in seconds) for when the fine-tuning job was created.
    - events::Vector{FineTuneEvent} : The list of events that have been observed in the lifecycle of the FineTune job.
    - fine_tuned_model::String : The name of the fine-tuned model that is being created.
    - hyperparams::FineTuneHyperparams
    - model::String : The base model that is being fine-tuned.
    - object::String : The object type, which is always \&quot;fine-tune\&quot;.
    - organization_id::String : The organization that owns the fine-tuning job.
    - result_files::Vector{OpenAIFile} : The compiled results files for the fine-tuning job.
    - status::String : The current status of the fine-tuning job, which can be either &#x60;created&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
    - training_files::Vector{OpenAIFile} : The list of files used for training.
    - updated_at::Int64 : The Unix timestamp (in seconds) for when the fine-tuning job was last updated.
    - validation_files::Vector{OpenAIFile} : The list of files used for validation.
"""
Base.@kwdef mutable struct FineTune <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    created_at::Union{Nothing, Int64} = nothing
    events::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{FineTuneEvent} }
    fine_tuned_model::Union{Nothing, String} = nothing
    hyperparams = nothing # spec type: Union{ Nothing, FineTuneHyperparams }
    model::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing
    organization_id::Union{Nothing, String} = nothing
    result_files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenAIFile} }
    status::Union{Nothing, String} = nothing
    training_files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenAIFile} }
    updated_at::Union{Nothing, Int64} = nothing
    validation_files::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{OpenAIFile} }

    function FineTune(id, created_at, events, fine_tuned_model, hyperparams, model, object, organization_id, result_files, status, training_files, updated_at, validation_files, )
        OpenAPI.validate_property(FineTune, Symbol("id"), id)
        OpenAPI.validate_property(FineTune, Symbol("created_at"), created_at)
        OpenAPI.validate_property(FineTune, Symbol("events"), events)
        OpenAPI.validate_property(FineTune, Symbol("fine_tuned_model"), fine_tuned_model)
        OpenAPI.validate_property(FineTune, Symbol("hyperparams"), hyperparams)
        OpenAPI.validate_property(FineTune, Symbol("model"), model)
        OpenAPI.validate_property(FineTune, Symbol("object"), object)
        OpenAPI.validate_property(FineTune, Symbol("organization_id"), organization_id)
        OpenAPI.validate_property(FineTune, Symbol("result_files"), result_files)
        OpenAPI.validate_property(FineTune, Symbol("status"), status)
        OpenAPI.validate_property(FineTune, Symbol("training_files"), training_files)
        OpenAPI.validate_property(FineTune, Symbol("updated_at"), updated_at)
        OpenAPI.validate_property(FineTune, Symbol("validation_files"), validation_files)
        return new(id, created_at, events, fine_tuned_model, hyperparams, model, object, organization_id, result_files, status, training_files, updated_at, validation_files, )
    end
end # type FineTune

const _property_types_FineTune = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("created_at")=>"Int64", Symbol("events")=>"Vector{FineTuneEvent}", Symbol("fine_tuned_model")=>"String", Symbol("hyperparams")=>"FineTuneHyperparams", Symbol("model")=>"String", Symbol("object")=>"String", Symbol("organization_id")=>"String", Symbol("result_files")=>"Vector{OpenAIFile}", Symbol("status")=>"String", Symbol("training_files")=>"Vector{OpenAIFile}", Symbol("updated_at")=>"Int64", Symbol("validation_files")=>"Vector{OpenAIFile}", )
OpenAPI.property_type(::Type{ FineTune }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_FineTune[name]))}

function check_required(o::FineTune)
    o.id === nothing && (return false)
    o.created_at === nothing && (return false)
    o.fine_tuned_model === nothing && (return false)
    o.hyperparams === nothing && (return false)
    o.model === nothing && (return false)
    o.object === nothing && (return false)
    o.organization_id === nothing && (return false)
    o.result_files === nothing && (return false)
    o.status === nothing && (return false)
    o.training_files === nothing && (return false)
    o.updated_at === nothing && (return false)
    o.validation_files === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ FineTune }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "FineTune", :enum, val, ["fine-tune"])
    end
end
