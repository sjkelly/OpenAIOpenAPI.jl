# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateCompletionRequest

    CreateCompletionRequest(;
        model=nothing,
        prompt=nothing,
        best_of=1,
        echo=false,
        frequency_penalty=0,
        logit_bias=nothing,
        logprobs=nothing,
        max_tokens=16,
        n=1,
        presence_penalty=0,
        seed=nothing,
        stop=nothing,
        stream=false,
        suffix=nothing,
        temperature=1,
        top_p=1,
        user=nothing,
    )

    - model::CreateCompletionRequestModel
    - prompt::CreateCompletionRequestPrompt
    - best_of::Int64 : Generates &#x60;best_of&#x60; completions server-side and returns the \&quot;best\&quot; (the one with the highest log probability per token). Results cannot be streamed.  When used with &#x60;n&#x60;, &#x60;best_of&#x60; controls the number of candidate completions and &#x60;n&#x60; specifies how many to return â€“ &#x60;best_of&#x60; must be greater than &#x60;n&#x60;.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. 
    - echo::Bool : Echo back the prompt in addition to the completion 
    - frequency_penalty::Float64 : Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    - logit_bias::Dict{String, Int64} : Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view&#x3D;bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass &#x60;{\&quot;50256\&quot;: -100}&#x60; to prevent the &lt;|endoftext|&gt; token from being generated. 
    - logprobs::Int64 : Include the log probabilities on the &#x60;logprobs&#x60; most likely tokens, as well the chosen tokens. For example, if &#x60;logprobs&#x60; is 5, the API will return a list of the 5 most likely tokens. The API will always return the &#x60;logprob&#x60; of the sampled token, so there may be up to &#x60;logprobs+1&#x60; elements in the response.  The maximum value for &#x60;logprobs&#x60; is 5. 
    - max_tokens::Int64 : The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus &#x60;max_tokens&#x60; cannot exceed the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
    - n::Int64 : How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for &#x60;max_tokens&#x60; and &#x60;stop&#x60;. 
    - presence_penalty::Float64 : Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    - seed::Int64 : If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
    - stop::CreateCompletionRequestStop
    - stream::Bool : Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
    - suffix::String : The suffix that comes after a completion of inserted text.
    - temperature::Float64 : What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    - top_p::Float64 : An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    - user::String : A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
"""
Base.@kwdef mutable struct CreateCompletionRequest <: OpenAPI.APIModel
    model = nothing # spec type: Union{ Nothing, CreateCompletionRequestModel }
    prompt = nothing # spec type: Union{ Nothing, CreateCompletionRequestPrompt }
    best_of::Union{Nothing, Int64} = 1
    echo::Union{Nothing, Bool} = false
    frequency_penalty::Union{Nothing, Float64} = 0
    logit_bias::Union{Nothing, Dict{String, Int64}} = nothing
    logprobs::Union{Nothing, Int64} = nothing
    max_tokens::Union{Nothing, Int64} = 16
    n::Union{Nothing, Int64} = 1
    presence_penalty::Union{Nothing, Float64} = 0
    seed::Union{Nothing, Int64} = nothing
    stop = nothing # spec type: Union{ Nothing, CreateCompletionRequestStop }
    stream::Union{Nothing, Bool} = false
    suffix::Union{Nothing, String} = nothing
    temperature::Union{Nothing, Float64} = 1
    top_p::Union{Nothing, Float64} = 1
    user::Union{Nothing, String} = nothing

    function CreateCompletionRequest(model, prompt, best_of, echo, frequency_penalty, logit_bias, logprobs, max_tokens, n, presence_penalty, seed, stop, stream, suffix, temperature, top_p, user, )
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("model"), model)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("prompt"), prompt)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("best_of"), best_of)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("echo"), echo)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("frequency_penalty"), frequency_penalty)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("logit_bias"), logit_bias)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("logprobs"), logprobs)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("max_tokens"), max_tokens)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("n"), n)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("presence_penalty"), presence_penalty)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("seed"), seed)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("stop"), stop)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("stream"), stream)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("suffix"), suffix)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("temperature"), temperature)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("top_p"), top_p)
        OpenAPI.validate_property(CreateCompletionRequest, Symbol("user"), user)
        return new(model, prompt, best_of, echo, frequency_penalty, logit_bias, logprobs, max_tokens, n, presence_penalty, seed, stop, stream, suffix, temperature, top_p, user, )
    end
end # type CreateCompletionRequest

const _property_types_CreateCompletionRequest = Dict{Symbol,String}(Symbol("model")=>"CreateCompletionRequestModel", Symbol("prompt")=>"CreateCompletionRequestPrompt", Symbol("best_of")=>"Int64", Symbol("echo")=>"Bool", Symbol("frequency_penalty")=>"Float64", Symbol("logit_bias")=>"Dict{String, Int64}", Symbol("logprobs")=>"Int64", Symbol("max_tokens")=>"Int64", Symbol("n")=>"Int64", Symbol("presence_penalty")=>"Float64", Symbol("seed")=>"Int64", Symbol("stop")=>"CreateCompletionRequestStop", Symbol("stream")=>"Bool", Symbol("suffix")=>"String", Symbol("temperature")=>"Float64", Symbol("top_p")=>"Float64", Symbol("user")=>"String", )
OpenAPI.property_type(::Type{ CreateCompletionRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateCompletionRequest[name]))}

function check_required(o::CreateCompletionRequest)
    o.model === nothing && (return false)
    o.prompt === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateCompletionRequest }, name::Symbol, val)
    if name === Symbol("best_of")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 20, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, 0, false)
    end
    if name === Symbol("frequency_penalty")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, -2, false)
    end
    if name === Symbol("logprobs")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 5, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, 0, false)
    end
    if name === Symbol("max_tokens")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, 0, false)
    end
    if name === Symbol("n")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 128, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, 1, false)
    end
    if name === Symbol("presence_penalty")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, -2, false)
    end
    if name === Symbol("seed")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 9223372036854775807, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, -9223372036854775808, false)
    end
    if name === Symbol("temperature")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, 0, false)
    end
    if name === Symbol("top_p")
        OpenAPI.validate_param(name, "CreateCompletionRequest", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "CreateCompletionRequest", :minimum, val, 0, false)
    end
end
