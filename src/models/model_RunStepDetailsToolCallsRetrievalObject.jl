# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunStepDetailsToolCallsRetrievalObject

    RunStepDetailsToolCallsRetrievalObject(;
        id=nothing,
        type=nothing,
        retrieval=nothing,
    )

    - id::String : The ID of the tool call object.
    - type::String : The type of tool call. This is always going to be &#x60;retrieval&#x60; for this type of tool call.
    - retrieval::Any : For now, this is always going to be an empty object.
"""
Base.@kwdef mutable struct RunStepDetailsToolCallsRetrievalObject <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing
    retrieval::Union{Nothing, Any} = nothing

    function RunStepDetailsToolCallsRetrievalObject(id, type, retrieval, )
        OpenAPI.validate_property(RunStepDetailsToolCallsRetrievalObject, Symbol("id"), id)
        OpenAPI.validate_property(RunStepDetailsToolCallsRetrievalObject, Symbol("type"), type)
        OpenAPI.validate_property(RunStepDetailsToolCallsRetrievalObject, Symbol("retrieval"), retrieval)
        return new(id, type, retrieval, )
    end
end # type RunStepDetailsToolCallsRetrievalObject

const _property_types_RunStepDetailsToolCallsRetrievalObject = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("type")=>"String", Symbol("retrieval")=>"Any", )
OpenAPI.property_type(::Type{ RunStepDetailsToolCallsRetrievalObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunStepDetailsToolCallsRetrievalObject[name]))}

function check_required(o::RunStepDetailsToolCallsRetrievalObject)
    o.id === nothing && (return false)
    o.type === nothing && (return false)
    o.retrieval === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RunStepDetailsToolCallsRetrievalObject }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RunStepDetailsToolCallsRetrievalObject", :enum, val, ["retrieval"])
    end
end
