# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateEditRequest

    CreateEditRequest(;
        instruction=nothing,
        model=nothing,
        input="",
        n=1,
        temperature=1,
        top_p=1,
    )

    - instruction::String : The instruction that tells the model how to edit the prompt.
    - model::CreateEditRequestModel
    - input::String : The input text to use as a starting point for the edit.
    - n::Int64 : How many edits to generate for the input and instruction.
    - temperature::Float64 : What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    - top_p::Float64 : An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
"""
Base.@kwdef mutable struct CreateEditRequest <: OpenAPI.APIModel
    instruction::Union{Nothing, String} = nothing
    model = nothing # spec type: Union{ Nothing, CreateEditRequestModel }
    input::Union{Nothing, String} = ""
    n::Union{Nothing, Int64} = 1
    temperature::Union{Nothing, Float64} = 1
    top_p::Union{Nothing, Float64} = 1

    function CreateEditRequest(instruction, model, input, n, temperature, top_p, )
        OpenAPI.validate_property(CreateEditRequest, Symbol("instruction"), instruction)
        OpenAPI.validate_property(CreateEditRequest, Symbol("model"), model)
        OpenAPI.validate_property(CreateEditRequest, Symbol("input"), input)
        OpenAPI.validate_property(CreateEditRequest, Symbol("n"), n)
        OpenAPI.validate_property(CreateEditRequest, Symbol("temperature"), temperature)
        OpenAPI.validate_property(CreateEditRequest, Symbol("top_p"), top_p)
        return new(instruction, model, input, n, temperature, top_p, )
    end
end # type CreateEditRequest

const _property_types_CreateEditRequest = Dict{Symbol,String}(Symbol("instruction")=>"String", Symbol("model")=>"CreateEditRequestModel", Symbol("input")=>"String", Symbol("n")=>"Int64", Symbol("temperature")=>"Float64", Symbol("top_p")=>"Float64", )
OpenAPI.property_type(::Type{ CreateEditRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateEditRequest[name]))}

function check_required(o::CreateEditRequest)
    o.instruction === nothing && (return false)
    o.model === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateEditRequest }, name::Symbol, val)
    if name === Symbol("n")
        OpenAPI.validate_param(name, "CreateEditRequest", :maximum, val, 20, false)
        OpenAPI.validate_param(name, "CreateEditRequest", :minimum, val, 1, false)
    end
    if name === Symbol("temperature")
        OpenAPI.validate_param(name, "CreateEditRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateEditRequest", :minimum, val, 0, false)
    end
    if name === Symbol("top_p")
        OpenAPI.validate_param(name, "CreateEditRequest", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "CreateEditRequest", :minimum, val, 0, false)
    end
end
