# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunStepDetailsToolCallsCodeOutputImageObject

    RunStepDetailsToolCallsCodeOutputImageObject(;
        type=nothing,
        image=nothing,
    )

    - type::String : Always &#x60;image&#x60;.
    - image::RunStepDetailsToolCallsCodeOutputImageObjectImage
"""
Base.@kwdef mutable struct RunStepDetailsToolCallsCodeOutputImageObject <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    image = nothing # spec type: Union{ Nothing, RunStepDetailsToolCallsCodeOutputImageObjectImage }

    function RunStepDetailsToolCallsCodeOutputImageObject(type, image, )
        OpenAPI.validate_property(RunStepDetailsToolCallsCodeOutputImageObject, Symbol("type"), type)
        OpenAPI.validate_property(RunStepDetailsToolCallsCodeOutputImageObject, Symbol("image"), image)
        return new(type, image, )
    end
end # type RunStepDetailsToolCallsCodeOutputImageObject

const _property_types_RunStepDetailsToolCallsCodeOutputImageObject = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("image")=>"RunStepDetailsToolCallsCodeOutputImageObjectImage", )
OpenAPI.property_type(::Type{ RunStepDetailsToolCallsCodeOutputImageObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunStepDetailsToolCallsCodeOutputImageObject[name]))}

function check_required(o::RunStepDetailsToolCallsCodeOutputImageObject)
    o.type === nothing && (return false)
    o.image === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RunStepDetailsToolCallsCodeOutputImageObject }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RunStepDetailsToolCallsCodeOutputImageObject", :enum, val, ["image"])
    end
end
