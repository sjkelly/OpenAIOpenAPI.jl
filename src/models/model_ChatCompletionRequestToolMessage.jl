# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionRequestToolMessage

    ChatCompletionRequestToolMessage(;
        role=nothing,
        content=nothing,
        tool_call_id=nothing,
    )

    - role::String : The role of the messages author, in this case &#x60;tool&#x60;.
    - content::String : The contents of the tool message.
    - tool_call_id::String : Tool call that this message is responding to.
"""
Base.@kwdef mutable struct ChatCompletionRequestToolMessage <: OpenAPI.APIModel
    role::Union{Nothing, String} = nothing
    content::Union{Nothing, String} = nothing
    tool_call_id::Union{Nothing, String} = nothing

    function ChatCompletionRequestToolMessage(role, content, tool_call_id, )
        OpenAPI.validate_property(ChatCompletionRequestToolMessage, Symbol("role"), role)
        OpenAPI.validate_property(ChatCompletionRequestToolMessage, Symbol("content"), content)
        OpenAPI.validate_property(ChatCompletionRequestToolMessage, Symbol("tool_call_id"), tool_call_id)
        return new(role, content, tool_call_id, )
    end
end # type ChatCompletionRequestToolMessage

const _property_types_ChatCompletionRequestToolMessage = Dict{Symbol,String}(Symbol("role")=>"String", Symbol("content")=>"String", Symbol("tool_call_id")=>"String", )
OpenAPI.property_type(::Type{ ChatCompletionRequestToolMessage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionRequestToolMessage[name]))}

function check_required(o::ChatCompletionRequestToolMessage)
    o.role === nothing && (return false)
    o.content === nothing && (return false)
    o.tool_call_id === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionRequestToolMessage }, name::Symbol, val)
    if name === Symbol("role")
        OpenAPI.validate_param(name, "ChatCompletionRequestToolMessage", :enum, val, ["tool"])
    end
end
