# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionRequestAssistantMessage

    ChatCompletionRequestAssistantMessage(;
        content=nothing,
        role=nothing,
        name=nothing,
        tool_calls=nothing,
        function_call=nothing,
    )

    - content::String : The contents of the assistant message. 
    - role::String : The role of the messages author, in this case &#x60;assistant&#x60;.
    - name::String : An optional name for the participant. Provides the model information to differentiate between participants of the same role.
    - tool_calls::Vector{ChatCompletionMessageToolCall} : The tool calls generated by the model, such as function calls.
    - function_call::ChatCompletionRequestAssistantMessageFunctionCall
"""
Base.@kwdef mutable struct ChatCompletionRequestAssistantMessage <: OpenAPI.APIModel
    content::Union{Nothing, String} = nothing
    role::Union{Nothing, String} = nothing
    name::Union{Nothing, String} = nothing
    tool_calls::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatCompletionMessageToolCall} }
    function_call = nothing # spec type: Union{ Nothing, ChatCompletionRequestAssistantMessageFunctionCall }

    function ChatCompletionRequestAssistantMessage(content, role, name, tool_calls, function_call, )
        OpenAPI.validate_property(ChatCompletionRequestAssistantMessage, Symbol("content"), content)
        OpenAPI.validate_property(ChatCompletionRequestAssistantMessage, Symbol("role"), role)
        OpenAPI.validate_property(ChatCompletionRequestAssistantMessage, Symbol("name"), name)
        OpenAPI.validate_property(ChatCompletionRequestAssistantMessage, Symbol("tool_calls"), tool_calls)
        OpenAPI.validate_property(ChatCompletionRequestAssistantMessage, Symbol("function_call"), function_call)
        return new(content, role, name, tool_calls, function_call, )
    end
end # type ChatCompletionRequestAssistantMessage

const _property_types_ChatCompletionRequestAssistantMessage = Dict{Symbol,String}(Symbol("content")=>"String", Symbol("role")=>"String", Symbol("name")=>"String", Symbol("tool_calls")=>"Vector{ChatCompletionMessageToolCall}", Symbol("function_call")=>"ChatCompletionRequestAssistantMessageFunctionCall", )
OpenAPI.property_type(::Type{ ChatCompletionRequestAssistantMessage }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionRequestAssistantMessage[name]))}

function check_required(o::ChatCompletionRequestAssistantMessage)
    o.content === nothing && (return false)
    o.role === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionRequestAssistantMessage }, name::Symbol, val)
    if name === Symbol("role")
        OpenAPI.validate_param(name, "ChatCompletionRequestAssistantMessage", :enum, val, ["assistant"])
    end
end
