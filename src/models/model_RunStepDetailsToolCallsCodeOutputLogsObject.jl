# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""RunStepDetailsToolCallsCodeOutputLogsObject
Text output from the Code Interpreter tool call as part of a run step.

    RunStepDetailsToolCallsCodeOutputLogsObject(;
        type=nothing,
        logs=nothing,
    )

    - type::String : Always &#x60;logs&#x60;.
    - logs::String : The text output from the Code Interpreter tool call.
"""
Base.@kwdef mutable struct RunStepDetailsToolCallsCodeOutputLogsObject <: OpenAPI.APIModel
    type::Union{Nothing, String} = nothing
    logs::Union{Nothing, String} = nothing

    function RunStepDetailsToolCallsCodeOutputLogsObject(type, logs, )
        OpenAPI.validate_property(RunStepDetailsToolCallsCodeOutputLogsObject, Symbol("type"), type)
        OpenAPI.validate_property(RunStepDetailsToolCallsCodeOutputLogsObject, Symbol("logs"), logs)
        return new(type, logs, )
    end
end # type RunStepDetailsToolCallsCodeOutputLogsObject

const _property_types_RunStepDetailsToolCallsCodeOutputLogsObject = Dict{Symbol,String}(Symbol("type")=>"String", Symbol("logs")=>"String", )
OpenAPI.property_type(::Type{ RunStepDetailsToolCallsCodeOutputLogsObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_RunStepDetailsToolCallsCodeOutputLogsObject[name]))}

function check_required(o::RunStepDetailsToolCallsCodeOutputLogsObject)
    o.type === nothing && (return false)
    o.logs === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ RunStepDetailsToolCallsCodeOutputLogsObject }, name::Symbol, val)
    if name === Symbol("type")
        OpenAPI.validate_param(name, "RunStepDetailsToolCallsCodeOutputLogsObject", :enum, val, ["logs"])
    end
end
