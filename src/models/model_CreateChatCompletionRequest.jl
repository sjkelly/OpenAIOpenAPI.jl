# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateChatCompletionRequest

    CreateChatCompletionRequest(;
        messages=nothing,
        model=nothing,
        frequency_penalty=0,
        logit_bias=nothing,
        max_tokens=nothing,
        n=1,
        presence_penalty=0,
        response_format=nothing,
        seed=nothing,
        stop=nothing,
        stream=false,
        temperature=1,
        top_p=1,
        tools=nothing,
        tool_choice=nothing,
        user=nothing,
        function_call=nothing,
        functions=nothing,
    )

    - messages::Vector{ChatCompletionRequestMessage} : A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
    - model::CreateChatCompletionRequestModel
    - frequency_penalty::Float64 : Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    - logit_bias::Dict{String, Int64} : Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
    - max_tokens::Int64 : The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
    - n::Int64 : How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.
    - presence_penalty::Float64 : Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
    - response_format::CreateChatCompletionRequestResponseFormat
    - seed::Int64 : This feature is in Beta.  If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
    - stop::CreateChatCompletionRequestStop
    - stream::Bool : If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
    - temperature::Float64 : What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
    - top_p::Float64 : An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
    - tools::Vector{ChatCompletionTool} : A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. 
    - tool_choice::ChatCompletionToolChoiceOption
    - user::String : A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
    - function_call::CreateChatCompletionRequestFunctionCall
    - functions::Vector{ChatCompletionFunctions} : Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. 
"""
Base.@kwdef mutable struct CreateChatCompletionRequest <: OpenAPI.APIModel
    messages::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatCompletionRequestMessage} }
    model = nothing # spec type: Union{ Nothing, CreateChatCompletionRequestModel }
    frequency_penalty::Union{Nothing, Float64} = 0
    logit_bias::Union{Nothing, Dict{String, Int64}} = nothing
    max_tokens::Union{Nothing, Int64} = nothing
    n::Union{Nothing, Int64} = 1
    presence_penalty::Union{Nothing, Float64} = 0
    response_format = nothing # spec type: Union{ Nothing, CreateChatCompletionRequestResponseFormat }
    seed::Union{Nothing, Int64} = nothing
    stop = nothing # spec type: Union{ Nothing, CreateChatCompletionRequestStop }
    stream::Union{Nothing, Bool} = false
    temperature::Union{Nothing, Float64} = 1
    top_p::Union{Nothing, Float64} = 1
    tools::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatCompletionTool} }
    tool_choice = nothing # spec type: Union{ Nothing, ChatCompletionToolChoiceOption }
    user::Union{Nothing, String} = nothing
    function_call = nothing # spec type: Union{ Nothing, CreateChatCompletionRequestFunctionCall }
    functions::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatCompletionFunctions} }

    function CreateChatCompletionRequest(messages, model, frequency_penalty, logit_bias, max_tokens, n, presence_penalty, response_format, seed, stop, stream, temperature, top_p, tools, tool_choice, user, function_call, functions, )
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("messages"), messages)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("model"), model)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("frequency_penalty"), frequency_penalty)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("logit_bias"), logit_bias)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("max_tokens"), max_tokens)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("n"), n)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("presence_penalty"), presence_penalty)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("response_format"), response_format)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("seed"), seed)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("stop"), stop)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("stream"), stream)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("temperature"), temperature)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("top_p"), top_p)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("tools"), tools)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("tool_choice"), tool_choice)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("user"), user)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("function_call"), function_call)
        OpenAPI.validate_property(CreateChatCompletionRequest, Symbol("functions"), functions)
        return new(messages, model, frequency_penalty, logit_bias, max_tokens, n, presence_penalty, response_format, seed, stop, stream, temperature, top_p, tools, tool_choice, user, function_call, functions, )
    end
end # type CreateChatCompletionRequest

const _property_types_CreateChatCompletionRequest = Dict{Symbol,String}(Symbol("messages")=>"Vector{ChatCompletionRequestMessage}", Symbol("model")=>"CreateChatCompletionRequestModel", Symbol("frequency_penalty")=>"Float64", Symbol("logit_bias")=>"Dict{String, Int64}", Symbol("max_tokens")=>"Int64", Symbol("n")=>"Int64", Symbol("presence_penalty")=>"Float64", Symbol("response_format")=>"CreateChatCompletionRequestResponseFormat", Symbol("seed")=>"Int64", Symbol("stop")=>"CreateChatCompletionRequestStop", Symbol("stream")=>"Bool", Symbol("temperature")=>"Float64", Symbol("top_p")=>"Float64", Symbol("tools")=>"Vector{ChatCompletionTool}", Symbol("tool_choice")=>"ChatCompletionToolChoiceOption", Symbol("user")=>"String", Symbol("function_call")=>"CreateChatCompletionRequestFunctionCall", Symbol("functions")=>"Vector{ChatCompletionFunctions}", )
OpenAPI.property_type(::Type{ CreateChatCompletionRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateChatCompletionRequest[name]))}

function check_required(o::CreateChatCompletionRequest)
    o.messages === nothing && (return false)
    o.model === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateChatCompletionRequest }, name::Symbol, val)
    if name === Symbol("messages")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minItems, val, 1)
    end
    if name === Symbol("frequency_penalty")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minimum, val, -2, false)
    end
    if name === Symbol("n")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maximum, val, 128, false)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minimum, val, 1, false)
    end
    if name === Symbol("presence_penalty")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minimum, val, -2, false)
    end
    if name === Symbol("seed")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maximum, val, 9223372036854775807, false)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minimum, val, -9223372036854775808, false)
    end
    if name === Symbol("temperature")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maximum, val, 2, false)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minimum, val, 0, false)
    end
    if name === Symbol("top_p")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maximum, val, 1, false)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minimum, val, 0, false)
    end
    if name === Symbol("functions")
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :maxItems, val, 128)
        OpenAPI.validate_param(name, "CreateChatCompletionRequest", :minItems, val, 1)
    end
end
