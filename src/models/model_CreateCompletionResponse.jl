# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateCompletionResponse
Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint). 

    CreateCompletionResponse(;
        id=nothing,
        choices=nothing,
        created=nothing,
        model=nothing,
        system_fingerprint=nothing,
        object=nothing,
        usage=nothing,
    )

    - id::String : A unique identifier for the completion.
    - choices::Vector{CreateCompletionResponseChoicesInner} : The list of completion choices the model generated for the input prompt.
    - created::Int64 : The Unix timestamp (in seconds) of when the completion was created.
    - model::String : The model used for completion.
    - system_fingerprint::String : This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the &#x60;seed&#x60; request parameter to understand when backend changes have been made that might impact determinism. 
    - object::String : The object type, which is always \&quot;text_completion\&quot;
    - usage::CompletionUsage
"""
Base.@kwdef mutable struct CreateCompletionResponse <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    choices::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{CreateCompletionResponseChoicesInner} }
    created::Union{Nothing, Int64} = nothing
    model::Union{Nothing, String} = nothing
    system_fingerprint::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing
    usage = nothing # spec type: Union{ Nothing, CompletionUsage }

    function CreateCompletionResponse(id, choices, created, model, system_fingerprint, object, usage, )
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("id"), id)
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("choices"), choices)
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("created"), created)
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("model"), model)
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("system_fingerprint"), system_fingerprint)
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("object"), object)
        OpenAPI.validate_property(CreateCompletionResponse, Symbol("usage"), usage)
        return new(id, choices, created, model, system_fingerprint, object, usage, )
    end
end # type CreateCompletionResponse

const _property_types_CreateCompletionResponse = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("choices")=>"Vector{CreateCompletionResponseChoicesInner}", Symbol("created")=>"Int64", Symbol("model")=>"String", Symbol("system_fingerprint")=>"String", Symbol("object")=>"String", Symbol("usage")=>"CompletionUsage", )
OpenAPI.property_type(::Type{ CreateCompletionResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateCompletionResponse[name]))}

function check_required(o::CreateCompletionResponse)
    o.id === nothing && (return false)
    o.choices === nothing && (return false)
    o.created === nothing && (return false)
    o.model === nothing && (return false)
    o.object === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateCompletionResponse }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "CreateCompletionResponse", :enum, val, ["text_completion"])
    end
end
