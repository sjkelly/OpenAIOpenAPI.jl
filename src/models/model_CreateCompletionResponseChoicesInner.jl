# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateCompletionResponse_choices_inner

    CreateCompletionResponseChoicesInner(;
        finish_reason=nothing,
        index=nothing,
        logprobs=nothing,
        text=nothing,
    )

    - finish_reason::String : The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, or &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters. 
    - index::Int64
    - logprobs::CreateCompletionResponseChoicesInnerLogprobs
    - text::String
"""
Base.@kwdef mutable struct CreateCompletionResponseChoicesInner <: OpenAPI.APIModel
    finish_reason::Union{Nothing, String} = nothing
    index::Union{Nothing, Int64} = nothing
    logprobs = nothing # spec type: Union{ Nothing, CreateCompletionResponseChoicesInnerLogprobs }
    text::Union{Nothing, String} = nothing

    function CreateCompletionResponseChoicesInner(finish_reason, index, logprobs, text, )
        OpenAPI.validate_property(CreateCompletionResponseChoicesInner, Symbol("finish_reason"), finish_reason)
        OpenAPI.validate_property(CreateCompletionResponseChoicesInner, Symbol("index"), index)
        OpenAPI.validate_property(CreateCompletionResponseChoicesInner, Symbol("logprobs"), logprobs)
        OpenAPI.validate_property(CreateCompletionResponseChoicesInner, Symbol("text"), text)
        return new(finish_reason, index, logprobs, text, )
    end
end # type CreateCompletionResponseChoicesInner

const _property_types_CreateCompletionResponseChoicesInner = Dict{Symbol,String}(Symbol("finish_reason")=>"String", Symbol("index")=>"Int64", Symbol("logprobs")=>"CreateCompletionResponseChoicesInnerLogprobs", Symbol("text")=>"String", )
OpenAPI.property_type(::Type{ CreateCompletionResponseChoicesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateCompletionResponseChoicesInner[name]))}

function check_required(o::CreateCompletionResponseChoicesInner)
    o.finish_reason === nothing && (return false)
    o.index === nothing && (return false)
    o.logprobs === nothing && (return false)
    o.text === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateCompletionResponseChoicesInner }, name::Symbol, val)
    if name === Symbol("finish_reason")
        OpenAPI.validate_param(name, "CreateCompletionResponseChoicesInner", :enum, val, ["stop", "length", "content_filter"])
    end
end
