# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateChatCompletionStreamResponse_choices_inner

    CreateChatCompletionStreamResponseChoicesInner(;
        delta=nothing,
        finish_reason=nothing,
        index=nothing,
    )

    - delta::ChatCompletionStreamResponseDelta
    - finish_reason::String : The reason the model stopped generating tokens. This will be &#x60;stop&#x60; if the model hit a natural stop point or a provided stop sequence, &#x60;length&#x60; if the maximum number of tokens specified in the request was reached, &#x60;content_filter&#x60; if content was omitted due to a flag from our content filters, &#x60;tool_calls&#x60; if the model called a tool, or &#x60;function_call&#x60; (deprecated) if the model called a function. 
    - index::Int64 : The index of the choice in the list of choices.
"""
Base.@kwdef mutable struct CreateChatCompletionStreamResponseChoicesInner <: OpenAPI.APIModel
    delta = nothing # spec type: Union{ Nothing, ChatCompletionStreamResponseDelta }
    finish_reason::Union{Nothing, String} = nothing
    index::Union{Nothing, Int64} = nothing

    function CreateChatCompletionStreamResponseChoicesInner(delta, finish_reason, index, )
        OpenAPI.validate_property(CreateChatCompletionStreamResponseChoicesInner, Symbol("delta"), delta)
        OpenAPI.validate_property(CreateChatCompletionStreamResponseChoicesInner, Symbol("finish_reason"), finish_reason)
        OpenAPI.validate_property(CreateChatCompletionStreamResponseChoicesInner, Symbol("index"), index)
        return new(delta, finish_reason, index, )
    end
end # type CreateChatCompletionStreamResponseChoicesInner

const _property_types_CreateChatCompletionStreamResponseChoicesInner = Dict{Symbol,String}(Symbol("delta")=>"ChatCompletionStreamResponseDelta", Symbol("finish_reason")=>"String", Symbol("index")=>"Int64", )
OpenAPI.property_type(::Type{ CreateChatCompletionStreamResponseChoicesInner }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateChatCompletionStreamResponseChoicesInner[name]))}

function check_required(o::CreateChatCompletionStreamResponseChoicesInner)
    o.delta === nothing && (return false)
    o.finish_reason === nothing && (return false)
    o.index === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateChatCompletionStreamResponseChoicesInner }, name::Symbol, val)
    if name === Symbol("finish_reason")
        OpenAPI.validate_param(name, "CreateChatCompletionStreamResponseChoicesInner", :enum, val, ["stop", "length", "tool_calls", "content_filter", "function_call"])
    end
end
