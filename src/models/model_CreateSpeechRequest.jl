# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""CreateSpeechRequest

    CreateSpeechRequest(;
        model=nothing,
        input=nothing,
        voice=nothing,
        response_format="mp3",
        speed=1.0,
    )

    - model::CreateSpeechRequestModel
    - input::String : The text to generate audio for. The maximum length is 4096 characters.
    - voice::String : The voice to use when generating the audio. Supported voices are &#x60;alloy&#x60;, &#x60;echo&#x60;, &#x60;fable&#x60;, &#x60;onyx&#x60;, &#x60;nova&#x60;, and &#x60;shimmer&#x60;. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech/voice-options).
    - response_format::String : The format to audio in. Supported formats are &#x60;mp3&#x60;, &#x60;opus&#x60;, &#x60;aac&#x60;, and &#x60;flac&#x60;.
    - speed::Float64 : The speed of the generated audio. Select a value from &#x60;0.25&#x60; to &#x60;4.0&#x60;. &#x60;1.0&#x60; is the default.
"""
Base.@kwdef mutable struct CreateSpeechRequest <: OpenAPI.APIModel
    model = nothing # spec type: Union{ Nothing, CreateSpeechRequestModel }
    input::Union{Nothing, String} = nothing
    voice::Union{Nothing, String} = nothing
    response_format::Union{Nothing, String} = "mp3"
    speed::Union{Nothing, Float64} = 1.0

    function CreateSpeechRequest(model, input, voice, response_format, speed, )
        OpenAPI.validate_property(CreateSpeechRequest, Symbol("model"), model)
        OpenAPI.validate_property(CreateSpeechRequest, Symbol("input"), input)
        OpenAPI.validate_property(CreateSpeechRequest, Symbol("voice"), voice)
        OpenAPI.validate_property(CreateSpeechRequest, Symbol("response_format"), response_format)
        OpenAPI.validate_property(CreateSpeechRequest, Symbol("speed"), speed)
        return new(model, input, voice, response_format, speed, )
    end
end # type CreateSpeechRequest

const _property_types_CreateSpeechRequest = Dict{Symbol,String}(Symbol("model")=>"CreateSpeechRequestModel", Symbol("input")=>"String", Symbol("voice")=>"String", Symbol("response_format")=>"String", Symbol("speed")=>"Float64", )
OpenAPI.property_type(::Type{ CreateSpeechRequest }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_CreateSpeechRequest[name]))}

function check_required(o::CreateSpeechRequest)
    o.model === nothing && (return false)
    o.input === nothing && (return false)
    o.voice === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ CreateSpeechRequest }, name::Symbol, val)
    if name === Symbol("input")
        OpenAPI.validate_param(name, "CreateSpeechRequest", :maxLength, val, 4096)
    end
    if name === Symbol("voice")
        OpenAPI.validate_param(name, "CreateSpeechRequest", :enum, val, ["alloy", "echo", "fable", "onyx", "nova", "shimmer"])
    end
    if name === Symbol("response_format")
        OpenAPI.validate_param(name, "CreateSpeechRequest", :enum, val, ["mp3", "opus", "aac", "flac"])
    end
    if name === Symbol("speed")
        OpenAPI.validate_param(name, "CreateSpeechRequest", :maximum, val, 4.0, false)
        OpenAPI.validate_param(name, "CreateSpeechRequest", :minimum, val, 0.25, false)
    end
end
