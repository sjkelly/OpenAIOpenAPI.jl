# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""DeleteAssistantFileResponse
Deletes the association between the assistant and the file, but does not delete the [File](/docs/api-reference/files) object itself.

    DeleteAssistantFileResponse(;
        id=nothing,
        deleted=nothing,
        object=nothing,
    )

    - id::String
    - deleted::Bool
    - object::String
"""
Base.@kwdef mutable struct DeleteAssistantFileResponse <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    object::Union{Nothing, String} = nothing

    function DeleteAssistantFileResponse(id, deleted, object, )
        OpenAPI.validate_property(DeleteAssistantFileResponse, Symbol("id"), id)
        OpenAPI.validate_property(DeleteAssistantFileResponse, Symbol("deleted"), deleted)
        OpenAPI.validate_property(DeleteAssistantFileResponse, Symbol("object"), object)
        return new(id, deleted, object, )
    end
end # type DeleteAssistantFileResponse

const _property_types_DeleteAssistantFileResponse = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("deleted")=>"Bool", Symbol("object")=>"String", )
OpenAPI.property_type(::Type{ DeleteAssistantFileResponse }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_DeleteAssistantFileResponse[name]))}

function check_required(o::DeleteAssistantFileResponse)
    o.id === nothing && (return false)
    o.deleted === nothing && (return false)
    o.object === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ DeleteAssistantFileResponse }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "DeleteAssistantFileResponse", :enum, val, ["assistant.file.deleted"])
    end
end
