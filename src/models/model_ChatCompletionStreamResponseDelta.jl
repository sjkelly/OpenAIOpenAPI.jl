# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ChatCompletionStreamResponseDelta
A chat completion delta generated by streamed model responses.

    ChatCompletionStreamResponseDelta(;
        content=nothing,
        function_call=nothing,
        tool_calls=nothing,
        role=nothing,
    )

    - content::String : The contents of the chunk message.
    - function_call::ChatCompletionStreamResponseDeltaFunctionCall
    - tool_calls::Vector{ChatCompletionMessageToolCallChunk}
    - role::String : The role of the author of this message.
"""
Base.@kwdef mutable struct ChatCompletionStreamResponseDelta <: OpenAPI.APIModel
    content::Union{Nothing, String} = nothing
    function_call = nothing # spec type: Union{ Nothing, ChatCompletionStreamResponseDeltaFunctionCall }
    tool_calls::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ChatCompletionMessageToolCallChunk} }
    role::Union{Nothing, String} = nothing

    function ChatCompletionStreamResponseDelta(content, function_call, tool_calls, role, )
        OpenAPI.validate_property(ChatCompletionStreamResponseDelta, Symbol("content"), content)
        OpenAPI.validate_property(ChatCompletionStreamResponseDelta, Symbol("function_call"), function_call)
        OpenAPI.validate_property(ChatCompletionStreamResponseDelta, Symbol("tool_calls"), tool_calls)
        OpenAPI.validate_property(ChatCompletionStreamResponseDelta, Symbol("role"), role)
        return new(content, function_call, tool_calls, role, )
    end
end # type ChatCompletionStreamResponseDelta

const _property_types_ChatCompletionStreamResponseDelta = Dict{Symbol,String}(Symbol("content")=>"String", Symbol("function_call")=>"ChatCompletionStreamResponseDeltaFunctionCall", Symbol("tool_calls")=>"Vector{ChatCompletionMessageToolCallChunk}", Symbol("role")=>"String", )
OpenAPI.property_type(::Type{ ChatCompletionStreamResponseDelta }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ChatCompletionStreamResponseDelta[name]))}

function check_required(o::ChatCompletionStreamResponseDelta)
    true
end

function OpenAPI.validate_property(::Type{ ChatCompletionStreamResponseDelta }, name::Symbol, val)
    if name === Symbol("role")
        OpenAPI.validate_param(name, "ChatCompletionStreamResponseDelta", :enum, val, ["system", "user", "assistant", "tool"])
    end
end
