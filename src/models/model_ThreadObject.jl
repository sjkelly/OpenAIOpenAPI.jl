# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""ThreadObject
Represents a thread that contains [messages](/docs/api-reference/messages).

    ThreadObject(;
        id=nothing,
        object=nothing,
        created_at=nothing,
        metadata=nothing,
    )

    - id::String : The identifier, which can be referenced in API endpoints.
    - object::String : The object type, which is always &#x60;thread&#x60;.
    - created_at::Int64 : The Unix timestamp (in seconds) for when the thread was created.
    - metadata::Any : Set of 16 key-value pairs that can be attached to an object. This can be useful for storing additional information about the object in a structured format. Keys can be a maximum of 64 characters long and values can be a maxium of 512 characters long. 
"""
Base.@kwdef mutable struct ThreadObject <: OpenAPI.APIModel
    id::Union{Nothing, String} = nothing
    object::Union{Nothing, String} = nothing
    created_at::Union{Nothing, Int64} = nothing
    metadata::Union{Nothing, Any} = nothing

    function ThreadObject(id, object, created_at, metadata, )
        OpenAPI.validate_property(ThreadObject, Symbol("id"), id)
        OpenAPI.validate_property(ThreadObject, Symbol("object"), object)
        OpenAPI.validate_property(ThreadObject, Symbol("created_at"), created_at)
        OpenAPI.validate_property(ThreadObject, Symbol("metadata"), metadata)
        return new(id, object, created_at, metadata, )
    end
end # type ThreadObject

const _property_types_ThreadObject = Dict{Symbol,String}(Symbol("id")=>"String", Symbol("object")=>"String", Symbol("created_at")=>"Int64", Symbol("metadata")=>"Any", )
OpenAPI.property_type(::Type{ ThreadObject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_ThreadObject[name]))}

function check_required(o::ThreadObject)
    o.id === nothing && (return false)
    o.object === nothing && (return false)
    o.created_at === nothing && (return false)
    o.metadata === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ ThreadObject }, name::Symbol, val)
    if name === Symbol("object")
        OpenAPI.validate_param(name, "ThreadObject", :enum, val, ["thread"])
    end
end
