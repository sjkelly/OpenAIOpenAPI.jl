# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Error

    Error(;
        code=nothing,
        message=nothing,
        param=nothing,
        type=nothing,
    )

    - code::String
    - message::String
    - param::String
    - type::String
"""
Base.@kwdef mutable struct Error <: OpenAPI.APIModel
    code::Union{Nothing, String} = nothing
    message::Union{Nothing, String} = nothing
    param::Union{Nothing, String} = nothing
    type::Union{Nothing, String} = nothing

    function Error(code, message, param, type, )
        OpenAPI.validate_property(Error, Symbol("code"), code)
        OpenAPI.validate_property(Error, Symbol("message"), message)
        OpenAPI.validate_property(Error, Symbol("param"), param)
        OpenAPI.validate_property(Error, Symbol("type"), type)
        return new(code, message, param, type, )
    end
end # type Error

const _property_types_Error = Dict{Symbol,String}(Symbol("code")=>"String", Symbol("message")=>"String", Symbol("param")=>"String", Symbol("type")=>"String", )
OpenAPI.property_type(::Type{ Error }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Error[name]))}

function check_required(o::Error)
    o.code === nothing && (return false)
    o.message === nothing && (return false)
    o.param === nothing && (return false)
    o.type === nothing && (return false)
    true
end

function OpenAPI.validate_property(::Type{ Error }, name::Symbol, val)
end
